# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from msrest.serialization import Model

class AccountSasParameters(Model):
    """The parameters to list SAS credentials of a storage account.

    :param services: Required. The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
	:type services: str or Services
    :param resource_types: Required. The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
	:type resource_types: str or ResourceTypes
    :param permissions: Required. The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
	:type permissions: str or Permissions
    :param ip_address_or_range: An IP address or a range of IP addresses from which to accept requests.
	:type ip_address_or_range: str
    :param protocols: The protocol permitted for a request made with the account SAS.
	:type protocols: str or Protocols
    :param shared_access_start_time: The time at which the SAS becomes valid.
	:type shared_access_start_time: datetime.datetime
    :param shared_access_expiry_time: Required. The time at which the shared access signature becomes invalid.
	:type shared_access_expiry_time: datetime.datetime
    :param account_sas_parameters-key_to_sign: The key to sign the account SAS token with.
	:type account_sas_parameters-key_to_sign: str
    """

    _validation = {
        'services': {'required': True},
        'resource_types': {'required': True},
        'permissions': {'required': True},
        'shared_access_expiry_time': {'required': True},
    }

    _attribute_map = {
        'services': {'key': 'services', 'type': 'str'}
        'resource_types': {'key': 'resource_types', 'type': 'str'}
        'permissions': {'key': 'permissions', 'type': 'str'}
        'ip_address_or_range': {'key': 'ip_address_or_range', 'type': 'str'}
        'protocols': {'key': 'protocols', 'type': 'str'}
        'shared_access_start_time': {'key': 'shared_access_start_time', 'type': 'datetime.datetime'}
        'shared_access_expiry_time': {'key': 'shared_access_expiry_time', 'type': 'datetime.datetime'}
        'account_sas_parameters-key_to_sign': {'key': 'account_sas_parameters-key_to_sign', 'type': 'str'}
    }

    def __init__(self, *, services, resource_types, permissions, ip_address_or_range: str=None, protocols=None, shared_access_start_time: datetime.datetime=None, shared_access_expiry_time: datetime.datetime, account_sas_parameters-key_to_sign: str=None, **kwargs) -> None:
        super(AccountSasParameters, self).__init__(**kwargs)
        self.services = services
        self.resource_types = resource_types
        self.permissions = permissions
        self.ip_address_or_range = ip_address_or_range
        self.protocols = protocols
        self.shared_access_start_time = shared_access_start_time
        self.shared_access_expiry_time = shared_access_expiry_time
        self.account_sas_parameters-key_to_sign = account_sas_parameters-key_to_sign

class AzureEntityResource(Model):
    """The resource model definition for a Azure Resource Manager resource with an etag.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar azure_entity_resource-etag: Resource Etag.
	:type azure_entity_resource-etag: str
    """

    _attribute_map = {
        'azure_entity_resource-etag': {'key': 'azure_entity_resource-etag', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(AzureEntityResource, self).__init__(**kwargs)
        self.azure_entity_resource-etag = None

class AzureFilesIdentityBasedAuthentication(Model):
    """Settings for Azure Files identity based authentication.

    :param directory_service_options: Required. Indicates the directory service used.
	:type directory_service_options: str or DirectoryServiceOptions
    """

    _validation = {
        'directory_service_options': {'required': True},
    }

    _attribute_map = {
        'directory_service_options': {'key': 'directory_service_options', 'type': 'str'}
    }

    def __init__(self, *, directory_service_options, **kwargs) -> None:
        super(AzureFilesIdentityBasedAuthentication, self).__init__(**kwargs)
        self.directory_service_options = directory_service_options

class CheckNameAvailabilityResult(Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name_available: Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
	:type name_available: bool
    :ivar reason: Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
	:type reason: str or Reason
    :ivar check_name_availability_result-message: Gets an error message explaining the Reason value in more detail.
	:type check_name_availability_result-message: str
    """

    _attribute_map = {
        'name_available': {'key': 'name_available', 'type': 'bool'}
        'reason': {'key': 'reason', 'type': 'str'}
        'check_name_availability_result-message': {'key': 'check_name_availability_result-message', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.check_name_availability_result-message = None

class CustomDomain(Model):
    """The custom domain assigned to this storage account. This can be set via Update.

    :param custom_domain-name: Required. Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
	:type custom_domain-name: str
    :param use_sub_domain_name: Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
	:type use_sub_domain_name: bool
    """

    _validation = {
        'custom_domain-name': {'required': True},
    }

    _attribute_map = {
        'custom_domain-name': {'key': 'custom_domain-name', 'type': 'str'}
        'use_sub_domain_name': {'key': 'use_sub_domain_name', 'type': 'bool'}
    }

    def __init__(self, *, custom_domain-name: str, use_sub_domain_name: bool=None, **kwargs) -> None:
        super(CustomDomain, self).__init__(**kwargs)
        self.custom_domain-name = custom_domain-name
        self.use_sub_domain_name = use_sub_domain_name

class DateAfterCreation(Model):
    """Object to define the number of days after creation.

    :param days_after_creation_greater_than: Required. Value indicating the age in days after creation.
	:type days_after_creation_greater_than: float
    """

    _validation = {
        'days_after_creation_greater_than': {'required': True},
    }

    _attribute_map = {
        'days_after_creation_greater_than': {'key': 'days_after_creation_greater_than', 'type': 'float'}
    }

    def __init__(self, *, days_after_creation_greater_than: float, **kwargs) -> None:
        super(DateAfterCreation, self).__init__(**kwargs)
        self.days_after_creation_greater_than = days_after_creation_greater_than

class DateAfterModification(Model):
    """Object to define the number of days after last modification.

    :param days_after_modification_greater_than: Required. Value indicating the age in days after last modification.
	:type days_after_modification_greater_than: float
    """

    _validation = {
        'days_after_modification_greater_than': {'required': True},
    }

    _attribute_map = {
        'days_after_modification_greater_than': {'key': 'days_after_modification_greater_than', 'type': 'float'}
    }

    def __init__(self, *, days_after_modification_greater_than: float, **kwargs) -> None:
        super(DateAfterModification, self).__init__(**kwargs)
        self.days_after_modification_greater_than = days_after_modification_greater_than

class Dimension(Model):
    """Dimension of blobs, possibly be blob type or access tier.

    :param dimension-name: Display name of dimension.
	:type dimension-name: str
    :param dimension-display_name: Display name of dimension.
	:type dimension-display_name: str
    """

    _attribute_map = {
        'dimension-name': {'key': 'dimension-name', 'type': 'str'}
        'dimension-display_name': {'key': 'dimension-display_name', 'type': 'str'}
    }

    def __init__(self, *, dimension-name: str=None, dimension-display_name: str=None, **kwargs) -> None:
        super(Dimension, self).__init__(**kwargs)
        self.dimension-name = dimension-name
        self.dimension-display_name = dimension-display_name

class Encryption(Model):
    """The encryption settings on the storage account.

    :param encryption_services: A list of services that support encryption.
	:type encryption_services: EncryptionServices
    :param key_source: Required. The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault.
	:type key_source: str or KeySource
    :param key_vault_properties: Properties of key vault.
	:type key_vault_properties: KeyVaultProperties
    """

    _validation = {
        'key_source': {'required': True},
    }

    _attribute_map = {
        'encryption_services': {'key': 'encryption_services', 'type': 'EncryptionServices'}
        'key_source': {'key': 'key_source', 'type': 'str'}
        'key_vault_properties': {'key': 'key_vault_properties', 'type': 'KeyVaultProperties'}
    }

    def __init__(self, *, encryption_services=None, key_source, key_vault_properties=None, **kwargs) -> None:
        super(Encryption, self).__init__(**kwargs)
        self.encryption_services = encryption_services
        self.key_source = key_source
        self.key_vault_properties = key_vault_properties

class EncryptionService(Model):
    """A service that allows server-side encryption to be used.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param enabled: A boolean indicating whether or not the service encrypts the data as it is stored.
	:type enabled: bool
    :ivar encryption_service-last_enabled_time: Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
	:type encryption_service-last_enabled_time: datetime.datetime
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'}
        'encryption_service-last_enabled_time': {'key': 'encryption_service-last_enabled_time', 'type': 'datetime.datetime'}
    }

    def __init__(self, *, enabled: bool=None, **kwargs) -> None:
        super(EncryptionService, self).__init__(**kwargs)
        self.enabled = enabled
        self.encryption_service-last_enabled_time = None

class EncryptionServices(Model):
    """A list of services that support encryption.

    :param encryption_service: A service that allows server-side encryption to be used.
	:type encryption_service: EncryptionService
    :param encryption_service: A service that allows server-side encryption to be used.
	:type encryption_service: EncryptionService
    :param encryption_service: A service that allows server-side encryption to be used.
	:type encryption_service: EncryptionService
    :param encryption_service: A service that allows server-side encryption to be used.
	:type encryption_service: EncryptionService
    """

    _attribute_map = {
        'encryption_service': {'key': 'encryption_service', 'type': 'EncryptionService'}
        'encryption_service': {'key': 'encryption_service', 'type': 'EncryptionService'}
        'encryption_service': {'key': 'encryption_service', 'type': 'EncryptionService'}
        'encryption_service': {'key': 'encryption_service', 'type': 'EncryptionService'}
    }

    def __init__(self, *, encryption_service=None, encryption_service=None, encryption_service=None, encryption_service=None, **kwargs) -> None:
        super(EncryptionServices, self).__init__(**kwargs)
        self.encryption_service = encryption_service
        self.encryption_service = encryption_service
        self.encryption_service = encryption_service
        self.encryption_service = encryption_service

class Endpoints(Model):
    """The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar endpoints-blob: Gets the blob endpoint.
	:type endpoints-blob: str
    :ivar endpoints-queue: Gets the queue endpoint.
	:type endpoints-queue: str
    :ivar endpoints-table: Gets the table endpoint.
	:type endpoints-table: str
    :ivar endpoints-file: Gets the file endpoint.
	:type endpoints-file: str
    :ivar endpoints-web: Gets the web endpoint.
	:type endpoints-web: str
    :ivar endpoints-dfs: Gets the dfs endpoint.
	:type endpoints-dfs: str
    """

    _attribute_map = {
        'endpoints-blob': {'key': 'endpoints-blob', 'type': 'str'}
        'endpoints-queue': {'key': 'endpoints-queue', 'type': 'str'}
        'endpoints-table': {'key': 'endpoints-table', 'type': 'str'}
        'endpoints-file': {'key': 'endpoints-file', 'type': 'str'}
        'endpoints-web': {'key': 'endpoints-web', 'type': 'str'}
        'endpoints-dfs': {'key': 'endpoints-dfs', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(Endpoints, self).__init__(**kwargs)
        self.endpoints-blob = None
        self.endpoints-queue = None
        self.endpoints-table = None
        self.endpoints-file = None
        self.endpoints-web = None
        self.endpoints-dfs = None

class GeoReplicationStats(Model):
    """Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar geo_replication_status: The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
	:type geo_replication_status: str or GeoReplicationStatus
    :ivar geo_replication_stats-last_sync_time: All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
	:type geo_replication_stats-last_sync_time: datetime.datetime
    :ivar can_failover: A boolean flag which indicates whether or not account failover is supported for the account.
	:type can_failover: bool
    """

    _attribute_map = {
        'geo_replication_status': {'key': 'geo_replication_status', 'type': 'str'}
        'geo_replication_stats-last_sync_time': {'key': 'geo_replication_stats-last_sync_time', 'type': 'datetime.datetime'}
        'can_failover': {'key': 'can_failover', 'type': 'bool'}
    }

    def __init__(self, **kwargs) -> None:
        super(GeoReplicationStats, self).__init__(**kwargs)
        self.geo_replication_status = None
        self.geo_replication_stats-last_sync_time = None
        self.can_failover = None

class IPRule(Model):
    """IP rule with specific IP or IP range in CIDR format.

    :param ip_address_or_range: Required. Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	:type ip_address_or_range: str
    :param action: The action of virtual network rule.
	:type action: str or Action
    """

    _validation = {
        'ip_address_or_range': {'required': True},
    }

    _attribute_map = {
        'ip_address_or_range': {'key': 'ip_address_or_range', 'type': 'str'}
        'action': {'key': 'action', 'type': 'str'}
    }

    def __init__(self, *, ip_address_or_range: str, action=None, **kwargs) -> None:
        super(IPRule, self).__init__(**kwargs)
        self.ip_address_or_range = ip_address_or_range
        self.action = action

class Identity(Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar identity-principal_id: The principal ID of resource identity.
	:type identity-principal_id: str
    :ivar identity-tenant_id: The tenant ID of resource.
	:type identity-tenant_id: str
    :param identity_type: Required. The identity type.
	:type identity_type: str or IdentityType
    """

    _validation = {
        'identity-principal_id': {'readonly': True},
        'identity-tenant_id': {'readonly': True},
        'identity_type': {'required': True},
    }

    _attribute_map = {
        'identity-principal_id': {'key': 'identity-principal_id', 'type': 'str'}
        'identity-tenant_id': {'key': 'identity-tenant_id', 'type': 'str'}
        'identity_type': {'key': 'identity_type', 'type': 'str'}
    }

    def __init__(self, *, identity_type, **kwargs) -> None:
        super(Identity, self).__init__(**kwargs)
        self.identity-principal_id = None
        self.identity-tenant_id = None
        self.identity_type = identity_type

class KeyVaultProperties(Model):
    """Properties of key vault.

    :param key_name: The name of KeyVault key.
	:type key_name: str
    :param key_version: The version of KeyVault key.
	:type key_version: str
    :param key_vault_uri: The Uri of KeyVault.
	:type key_vault_uri: str
    """

    _attribute_map = {
        'key_name': {'key': 'key_name', 'type': 'str'}
        'key_version': {'key': 'key_version', 'type': 'str'}
        'key_vault_uri': {'key': 'key_vault_uri', 'type': 'str'}
    }

    def __init__(self, *, key_name: str=None, key_version: str=None, key_vault_uri: str=None, **kwargs) -> None:
        super(KeyVaultProperties, self).__init__(**kwargs)
        self.key_name = key_name
        self.key_version = key_version
        self.key_vault_uri = key_vault_uri

class ListAccountSasResponse(Model):
    """The List SAS credentials operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar list_account_sas_response-account_sas_token: List SAS credentials of storage account.
	:type list_account_sas_response-account_sas_token: str
    """

    _attribute_map = {
        'list_account_sas_response-account_sas_token': {'key': 'list_account_sas_response-account_sas_token', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(ListAccountSasResponse, self).__init__(**kwargs)
        self.list_account_sas_response-account_sas_token = None

class ListServiceSasResponse(Model):
    """The List service SAS credentials operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar list_service_sas_response-service_sas_token: List service SAS credentials of specific resource.
	:type list_service_sas_response-service_sas_token: str
    """

    _attribute_map = {
        'list_service_sas_response-service_sas_token': {'key': 'list_service_sas_response-service_sas_token', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(ListServiceSasResponse, self).__init__(**kwargs)
        self.list_service_sas_response-service_sas_token = None

class ManagementPolicy(Model):
    """The Get Storage Account ManagementPolicies operation response.

    :param management_policy_properties: The Storage Account ManagementPolicy properties.
	:type management_policy_properties: ManagementPolicyProperties
    """

    _attribute_map = {
        'management_policy_properties': {'key': 'management_policy_properties', 'type': 'ManagementPolicyProperties'}
    }

    def __init__(self, *, management_policy_properties=None, **kwargs) -> None:
        super(ManagementPolicy, self).__init__(**kwargs)
        self.management_policy_properties = management_policy_properties

class ManagementPolicyAction(Model):
    """Actions are applied to the filtered blobs when the execution condition is met.

    :param management_policy_base_blob: Management policy action for base blob.
	:type management_policy_base_blob: ManagementPolicyBaseBlob
    :param management_policy_snap_shot: Management policy action for snapshot.
	:type management_policy_snap_shot: ManagementPolicySnapShot
    """

    _attribute_map = {
        'management_policy_base_blob': {'key': 'management_policy_base_blob', 'type': 'ManagementPolicyBaseBlob'}
        'management_policy_snap_shot': {'key': 'management_policy_snap_shot', 'type': 'ManagementPolicySnapShot'}
    }

    def __init__(self, *, management_policy_base_blob=None, management_policy_snap_shot=None, **kwargs) -> None:
        super(ManagementPolicyAction, self).__init__(**kwargs)
        self.management_policy_base_blob = management_policy_base_blob
        self.management_policy_snap_shot = management_policy_snap_shot

class ManagementPolicyBaseBlob(Model):
    """Management policy action for base blob.

    :param date_after_modification: Object to define the number of days after last modification.
	:type date_after_modification: DateAfterModification
    :param date_after_modification: Object to define the number of days after last modification.
	:type date_after_modification: DateAfterModification
    :param date_after_modification: Object to define the number of days after last modification.
	:type date_after_modification: DateAfterModification
    """

    _attribute_map = {
        'date_after_modification': {'key': 'date_after_modification', 'type': 'DateAfterModification'}
        'date_after_modification': {'key': 'date_after_modification', 'type': 'DateAfterModification'}
        'date_after_modification': {'key': 'date_after_modification', 'type': 'DateAfterModification'}
    }

    def __init__(self, *, date_after_modification=None, date_after_modification=None, date_after_modification=None, **kwargs) -> None:
        super(ManagementPolicyBaseBlob, self).__init__(**kwargs)
        self.date_after_modification = date_after_modification
        self.date_after_modification = date_after_modification
        self.date_after_modification = date_after_modification

class ManagementPolicyDefinition(Model):
    """An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.

    :param management_policy_action: Required. Actions are applied to the filtered blobs when the execution condition is met.
	:type management_policy_action: ManagementPolicyAction
    :param management_policy_filter: Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.
	:type management_policy_filter: ManagementPolicyFilter
    """

    _validation = {
        'management_policy_action': {'required': True},
    }

    _attribute_map = {
        'management_policy_action': {'key': 'management_policy_action', 'type': 'ManagementPolicyAction'}
        'management_policy_filter': {'key': 'management_policy_filter', 'type': 'ManagementPolicyFilter'}
    }

    def __init__(self, *, management_policy_action, management_policy_filter=None, **kwargs) -> None:
        super(ManagementPolicyDefinition, self).__init__(**kwargs)
        self.management_policy_action = management_policy_action
        self.management_policy_filter = management_policy_filter

class ManagementPolicyFilter(Model):
    """Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.

    :param management_policy_filter-prefix_match: An array of strings for prefixes to be match.
	:type management_policy_filter-prefix_match: list[string]
    :param management_policy_filter-blob_types: Required. An array of predefined enum values. Only blockBlob is supported.
	:type management_policy_filter-blob_types: list[string]
    """

    _validation = {
        'management_policy_filter-blob_types': {'required': True},
    }

    _attribute_map = {
        'management_policy_filter-prefix_match': {'key': 'management_policy_filter-prefix_match', 'type': '[string]'}
        'management_policy_filter-blob_types': {'key': 'management_policy_filter-blob_types', 'type': '[string]'}
    }

    def __init__(self, *, management_policy_filter-prefix_match=None, management_policy_filter-blob_types, **kwargs) -> None:
        super(ManagementPolicyFilter, self).__init__(**kwargs)
        self.management_policy_filter-prefix_match = management_policy_filter-prefix_match
        self.management_policy_filter-blob_types = management_policy_filter-blob_types

class ManagementPolicyProperties(Model):
    """The Storage Account ManagementPolicy properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar management_policy_properties-last_modified_time: Returns the date and time the ManagementPolicies was last modified.
	:type management_policy_properties-last_modified_time: datetime.datetime
    :param management_policy_schema: Required. The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
	:type management_policy_schema: ManagementPolicySchema
    """

    _validation = {
        'management_policy_properties-last_modified_time': {'readonly': True},
        'management_policy_schema': {'required': True},
    }

    _attribute_map = {
        'management_policy_properties-last_modified_time': {'key': 'management_policy_properties-last_modified_time', 'type': 'datetime.datetime'}
        'management_policy_schema': {'key': 'management_policy_schema', 'type': 'ManagementPolicySchema'}
    }

    def __init__(self, *, management_policy_schema, **kwargs) -> None:
        super(ManagementPolicyProperties, self).__init__(**kwargs)
        self.management_policy_properties-last_modified_time = None
        self.management_policy_schema = management_policy_schema

class ManagementPolicyRule(Model):
    """An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.

    :param enabled: Rule is enabled if set to true.
	:type enabled: bool
    :param management_policy_rule-name: Required. A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
	:type management_policy_rule-name: str
    :param type: Required. The valid value is Lifecycle.
	:type type: str or type
    :param management_policy_definition: Required. An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
	:type management_policy_definition: ManagementPolicyDefinition
    """

    _validation = {
        'management_policy_rule-name': {'required': True},
        'type': {'required': True},
        'management_policy_definition': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'}
        'management_policy_rule-name': {'key': 'management_policy_rule-name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        'management_policy_definition': {'key': 'management_policy_definition', 'type': 'ManagementPolicyDefinition'}
    }

    def __init__(self, *, enabled: bool=None, management_policy_rule-name: str, type, management_policy_definition, **kwargs) -> None:
        super(ManagementPolicyRule, self).__init__(**kwargs)
        self.enabled = enabled
        self.management_policy_rule-name = management_policy_rule-name
        self.type = type
        self.management_policy_definition = management_policy_definition

class ManagementPolicySchema(Model):
    """The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.

    :param management_policy_schema-rules: Required. The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
	:type management_policy_schema-rules: list[object]
    """

    _validation = {
        'management_policy_schema-rules': {'required': True},
    }

    _attribute_map = {
        'management_policy_schema-rules': {'key': 'management_policy_schema-rules', 'type': '[object]'}
    }

    def __init__(self, *, management_policy_schema-rules, **kwargs) -> None:
        super(ManagementPolicySchema, self).__init__(**kwargs)
        self.management_policy_schema-rules = management_policy_schema-rules

class ManagementPolicySnapShot(Model):
    """Management policy action for snapshot.

    :param date_after_creation: Object to define the number of days after creation.
	:type date_after_creation: DateAfterCreation
    """

    _attribute_map = {
        'date_after_creation': {'key': 'date_after_creation', 'type': 'DateAfterCreation'}
    }

    def __init__(self, *, date_after_creation=None, **kwargs) -> None:
        super(ManagementPolicySnapShot, self).__init__(**kwargs)
        self.date_after_creation = date_after_creation

class MetricSpecification(Model):
    """Metric specification of operation.

    :param metric_specification-name: Name of metric specification.
	:type metric_specification-name: str
    :param metric_specification-display_name: Display name of metric specification.
	:type metric_specification-display_name: str
    :param metric_specification-display_description: Display description of metric specification.
	:type metric_specification-display_description: str
    :param metric_specification-unit: Unit could be Bytes or Count.
	:type metric_specification-unit: str
    :param metric_specification-dimensions: Dimensions of blobs, including blob type and access tier.
	:type metric_specification-dimensions: list[object]
    :param metric_specification-aggregation_type: Aggregation type could be Average.
	:type metric_specification-aggregation_type: str
    :param fill_gap_with_zero: The property to decide fill gap with zero or not.
	:type fill_gap_with_zero: bool
    :param metric_specification-category: The category this metric specification belong to, could be Capacity.
	:type metric_specification-category: str
    :param metric_specification-resource_id_dimension_name_override: Account Resource Id.
	:type metric_specification-resource_id_dimension_name_override: str
    """

    _attribute_map = {
        'metric_specification-name': {'key': 'metric_specification-name', 'type': 'str'}
        'metric_specification-display_name': {'key': 'metric_specification-display_name', 'type': 'str'}
        'metric_specification-display_description': {'key': 'metric_specification-display_description', 'type': 'str'}
        'metric_specification-unit': {'key': 'metric_specification-unit', 'type': 'str'}
        'metric_specification-dimensions': {'key': 'metric_specification-dimensions', 'type': '[object]'}
        'metric_specification-aggregation_type': {'key': 'metric_specification-aggregation_type', 'type': 'str'}
        'fill_gap_with_zero': {'key': 'fill_gap_with_zero', 'type': 'bool'}
        'metric_specification-category': {'key': 'metric_specification-category', 'type': 'str'}
        'metric_specification-resource_id_dimension_name_override': {'key': 'metric_specification-resource_id_dimension_name_override', 'type': 'str'}
    }

    def __init__(self, *, metric_specification-name: str=None, metric_specification-display_name: str=None, metric_specification-display_description: str=None, metric_specification-unit: str=None, metric_specification-dimensions=None, metric_specification-aggregation_type: str=None, fill_gap_with_zero: bool=None, metric_specification-category: str=None, metric_specification-resource_id_dimension_name_override: str=None, **kwargs) -> None:
        super(MetricSpecification, self).__init__(**kwargs)
        self.metric_specification-name = metric_specification-name
        self.metric_specification-display_name = metric_specification-display_name
        self.metric_specification-display_description = metric_specification-display_description
        self.metric_specification-unit = metric_specification-unit
        self.metric_specification-dimensions = metric_specification-dimensions
        self.metric_specification-aggregation_type = metric_specification-aggregation_type
        self.fill_gap_with_zero = fill_gap_with_zero
        self.metric_specification-category = metric_specification-category
        self.metric_specification-resource_id_dimension_name_override = metric_specification-resource_id_dimension_name_override

class NetworkRuleSet(Model):
    """Network rule set

    :param bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
	:type bypass: str or Bypass
    :param network_rule_set-virtual_network_rules: Sets the virtual network rules.
	:type network_rule_set-virtual_network_rules: list[object]
    :param network_rule_set-ip_rules: Sets the IP ACL rules.
	:type network_rule_set-ip_rules: list[object]
    :param default_action: Required. Specifies the default action of allow or deny when no other rules match.
	:type default_action: str or DefaultAction
    """

    _validation = {
        'default_action': {'required': True},
    }

    _attribute_map = {
        'bypass': {'key': 'bypass', 'type': 'str'}
        'network_rule_set-virtual_network_rules': {'key': 'network_rule_set-virtual_network_rules', 'type': '[object]'}
        'network_rule_set-ip_rules': {'key': 'network_rule_set-ip_rules', 'type': '[object]'}
        'default_action': {'key': 'default_action', 'type': 'str'}
    }

    def __init__(self, *, bypass=None, network_rule_set-virtual_network_rules=None, network_rule_set-ip_rules=None, default_action, **kwargs) -> None:
        super(NetworkRuleSet, self).__init__(**kwargs)
        self.bypass = bypass
        self.network_rule_set-virtual_network_rules = network_rule_set-virtual_network_rules
        self.network_rule_set-ip_rules = network_rule_set-ip_rules
        self.default_action = default_action

class Operation(Model):
    """Storage REST API operation definition.

    :param operation-name: Operation name: {provider}/{resource}/{operation}.
	:type operation-name: str
    :param operation-display: Display metadata associated with the operation.
	:type operation-display: Operation-display
    :param operation-origin: The origin of operations.
	:type operation-origin: str
    :param operation_properties: Properties of operation, include metric specifications.
	:type operation_properties: OperationProperties
    """

    _attribute_map = {
        'operation-name': {'key': 'operation-name', 'type': 'str'}
        'operation-display': {'key': 'operation-display', 'type': 'Operation-display'}
        'operation-origin': {'key': 'operation-origin', 'type': 'str'}
        'operation_properties': {'key': 'operation_properties', 'type': 'OperationProperties'}
    }

    def __init__(self, *, operation-name: str=None, operation-display=None, operation-origin: str=None, operation_properties=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.operation-name = operation-name
        self.operation-display = operation-display
        self.operation-origin = operation-origin
        self.operation_properties = operation_properties

class Operation-display(Model):
    """Display metadata associated with the operation.

    :param operation-display-provider: Service provider: Microsoft Storage.
	:type operation-display-provider: str
    :param operation-display-resource: Resource on which the operation is performed etc.
	:type operation-display-resource: str
    :param operation-display-operation: Type of operation: get, read, delete, etc.
	:type operation-display-operation: str
    :param operation-display-description: Description of the operation.
	:type operation-display-description: str
    """

    _attribute_map = {
        'operation-display-provider': {'key': 'operation-display-provider', 'type': 'str'}
        'operation-display-resource': {'key': 'operation-display-resource', 'type': 'str'}
        'operation-display-operation': {'key': 'operation-display-operation', 'type': 'str'}
        'operation-display-description': {'key': 'operation-display-description', 'type': 'str'}
    }

    def __init__(self, *, operation-display-provider: str=None, operation-display-resource: str=None, operation-display-operation: str=None, operation-display-description: str=None, **kwargs) -> None:
        super(Operation-display, self).__init__(**kwargs)
        self.operation-display-provider = operation-display-provider
        self.operation-display-resource = operation-display-resource
        self.operation-display-operation = operation-display-operation
        self.operation-display-description = operation-display-description

class OperationListResult(Model):
    """Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.

    :param operation_list_result-value: List of Storage operations supported by the Storage resource provider.
	:type operation_list_result-value: list[object]
    """

    _attribute_map = {
        'operation_list_result-value': {'key': 'operation_list_result-value', 'type': '[object]'}
    }

    def __init__(self, *, operation_list_result-value=None, **kwargs) -> None:
        super(OperationListResult, self).__init__(**kwargs)
        self.operation_list_result-value = operation_list_result-value

class OperationProperties(Model):
    """Properties of operation, include metric specifications.

    :param service_specification: One property of operation, include metric specifications.
	:type service_specification: ServiceSpecification
    """

    _attribute_map = {
        'service_specification': {'key': 'service_specification', 'type': 'ServiceSpecification'}
    }

    def __init__(self, *, service_specification=None, **kwargs) -> None:
        super(OperationProperties, self).__init__(**kwargs)
        self.service_specification = service_specification

class Resource(Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource-id: Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
	:type resource-id: str
    :ivar resource-name: The name of the resource.
	:type resource-name: str
    :ivar resource-type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	:type resource-type: str
    """

    _attribute_map = {
        'resource-id': {'key': 'resource-id', 'type': 'str'}
        'resource-name': {'key': 'resource-name', 'type': 'str'}
        'resource-type': {'key': 'resource-type', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.resource-id = None
        self.resource-name = None
        self.resource-type = None

class Restriction(Model):
    """The restriction because of which SKU cannot be used.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar restriction-type: The type of restrictions. As of now only possible value for this is location.
	:type restriction-type: str
    :ivar restriction-values: The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
	:type restriction-values: list[string]
    :param reason_code: The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
	:type reason_code: str or ReasonCode
    """

    _attribute_map = {
        'restriction-type': {'key': 'restriction-type', 'type': 'str'}
        'restriction-values': {'key': 'restriction-values', 'type': '[string]'}
        'reason_code': {'key': 'reason_code', 'type': 'str'}
    }

    def __init__(self, *, reason_code=None, **kwargs) -> None:
        super(Restriction, self).__init__(**kwargs)
        self.restriction-type = None
        self.restriction-values = None
        self.reason_code = reason_code

class SKUCapability(Model):
    """The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar sku_capability-name: The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
	:type sku_capability-name: str
    :ivar sku_capability-value: A string value to indicate states of given capability. Possibly 'true' or 'false'.
	:type sku_capability-value: str
    """

    _attribute_map = {
        'sku_capability-name': {'key': 'sku_capability-name', 'type': 'str'}
        'sku_capability-value': {'key': 'sku_capability-value', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(SKUCapability, self).__init__(**kwargs)
        self.sku_capability-name = None
        self.sku_capability-value = None

class ServiceSasParameters(Model):
    """The parameters to list service SAS credentials of a specific resource.

    :param service_sas_parameters-canonicalized_resource: Required. The canonical path to the signed resource.
	:type service_sas_parameters-canonicalized_resource: str
    :param resource: The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
	:type resource: str or Resource
    :param permissions: The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
	:type permissions: str or Permissions
    :param ip_address_or_range: An IP address or a range of IP addresses from which to accept requests.
	:type ip_address_or_range: str
    :param protocols: The protocol permitted for a request made with the account SAS.
	:type protocols: str or Protocols
    :param shared_access_start_time: The time at which the SAS becomes valid.
	:type shared_access_start_time: datetime.datetime
    :param shared_access_expiry_time: The time at which the shared access signature becomes invalid.
	:type shared_access_expiry_time: datetime.datetime
    :param identifier: A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
	:type identifier: str
    :param partition_key_start: The start of partition key.
	:type partition_key_start: str
    :param partition_key_end: The end of partition key.
	:type partition_key_end: str
    :param row_key_start: The start of row key.
	:type row_key_start: str
    :param row_key_end: The end of row key.
	:type row_key_end: str
    :param service_sas_parameters-key_to_sign: The key to sign the account SAS token with.
	:type service_sas_parameters-key_to_sign: str
    :param cache_control: The response header override for cache control.
	:type cache_control: str
    :param content_disposition: The response header override for content disposition.
	:type content_disposition: str
    :param content_encoding: The response header override for content encoding.
	:type content_encoding: str
    :param content_language: The response header override for content language.
	:type content_language: str
    :param content_type: The response header override for content type.
	:type content_type: str
    """

    _validation = {
        'service_sas_parameters-canonicalized_resource': {'required': True},
    }

    _attribute_map = {
        'service_sas_parameters-canonicalized_resource': {'key': 'service_sas_parameters-canonicalized_resource', 'type': 'str'}
        'resource': {'key': 'resource', 'type': 'str'}
        'permissions': {'key': 'permissions', 'type': 'str'}
        'ip_address_or_range': {'key': 'ip_address_or_range', 'type': 'str'}
        'protocols': {'key': 'protocols', 'type': 'str'}
        'shared_access_start_time': {'key': 'shared_access_start_time', 'type': 'datetime.datetime'}
        'shared_access_expiry_time': {'key': 'shared_access_expiry_time', 'type': 'datetime.datetime'}
        'identifier': {'key': 'identifier', 'type': 'str'}
        'partition_key_start': {'key': 'partition_key_start', 'type': 'str'}
        'partition_key_end': {'key': 'partition_key_end', 'type': 'str'}
        'row_key_start': {'key': 'row_key_start', 'type': 'str'}
        'row_key_end': {'key': 'row_key_end', 'type': 'str'}
        'service_sas_parameters-key_to_sign': {'key': 'service_sas_parameters-key_to_sign', 'type': 'str'}
        'cache_control': {'key': 'cache_control', 'type': 'str'}
        'content_disposition': {'key': 'content_disposition', 'type': 'str'}
        'content_encoding': {'key': 'content_encoding', 'type': 'str'}
        'content_language': {'key': 'content_language', 'type': 'str'}
        'content_type': {'key': 'content_type', 'type': 'str'}
    }

    def __init__(self, *, service_sas_parameters-canonicalized_resource: str, resource=None, permissions=None, ip_address_or_range: str=None, protocols=None, shared_access_start_time: datetime.datetime=None, shared_access_expiry_time: datetime.datetime=None, identifier: str=None, partition_key_start: str=None, partition_key_end: str=None, row_key_start: str=None, row_key_end: str=None, service_sas_parameters-key_to_sign: str=None, cache_control: str=None, content_disposition: str=None, content_encoding: str=None, content_language: str=None, content_type: str=None, **kwargs) -> None:
        super(ServiceSasParameters, self).__init__(**kwargs)
        self.service_sas_parameters-canonicalized_resource = service_sas_parameters-canonicalized_resource
        self.resource = resource
        self.permissions = permissions
        self.ip_address_or_range = ip_address_or_range
        self.protocols = protocols
        self.shared_access_start_time = shared_access_start_time
        self.shared_access_expiry_time = shared_access_expiry_time
        self.identifier = identifier
        self.partition_key_start = partition_key_start
        self.partition_key_end = partition_key_end
        self.row_key_start = row_key_start
        self.row_key_end = row_key_end
        self.service_sas_parameters-key_to_sign = service_sas_parameters-key_to_sign
        self.cache_control = cache_control
        self.content_disposition = content_disposition
        self.content_encoding = content_encoding
        self.content_language = content_language
        self.content_type = content_type

class ServiceSpecification(Model):
    """One property of operation, include metric specifications.

    :param service_specification-metric_specifications: Metric specifications of operation.
	:type service_specification-metric_specifications: list[object]
    """

    _attribute_map = {
        'service_specification-metric_specifications': {'key': 'service_specification-metric_specifications', 'type': '[object]'}
    }

    def __init__(self, *, service_specification-metric_specifications=None, **kwargs) -> None:
        super(ServiceSpecification, self).__init__(**kwargs)
        self.service_specification-metric_specifications = service_specification-metric_specifications

class Sku(Model):
    """The SKU of the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param sku_name: Required. Gets or sets the SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
	:type sku_name: str or SkuName
    :ivar sku_tier: Gets the SKU tier. This is based on the SKU name.
	:type sku_tier: str or SkuTier
    :ivar sku-resource_type: The type of the resource, usually it is 'storageAccounts'.
	:type sku-resource_type: str
    :param kind: Indicates the type of storage account.
	:type kind: str or Kind
    :ivar sku-locations: The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
	:type sku-locations: list[string]
    :ivar sku-capabilities: The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
	:type sku-capabilities: list[object]
    :param sku-restrictions: The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
	:type sku-restrictions: list[object]
    """

    _validation = {
        'sku_tier': {'readonly': True},
        'sku-resource_type': {'readonly': True},
        'sku-locations': {'readonly': True},
        'sku-capabilities': {'readonly': True},
        'sku_name': {'required': True},
    }

    _attribute_map = {
        'sku_name': {'key': 'sku_name', 'type': 'str'}
        'sku_tier': {'key': 'sku_tier', 'type': 'str'}
        'sku-resource_type': {'key': 'sku-resource_type', 'type': 'str'}
        'kind': {'key': 'kind', 'type': 'str'}
        'sku-locations': {'key': 'sku-locations', 'type': '[string]'}
        'sku-capabilities': {'key': 'sku-capabilities', 'type': '[object]'}
        'sku-restrictions': {'key': 'sku-restrictions', 'type': '[object]'}
    }

    def __init__(self, *, sku_name, kind=None, sku-restrictions=None, **kwargs) -> None:
        super(Sku, self).__init__(**kwargs)
        self.sku_name = sku_name
        self.sku_tier = None
        self.sku-resource_type = None
        self.kind = kind
        self.sku-locations = None
        self.sku-capabilities = None
        self.sku-restrictions = sku-restrictions

class StorageAccount(Model):
    """The storage account.

    :param sku: The SKU of the storage account.
	:type sku: Sku
    :param kind: Indicates the type of storage account.
	:type kind: str or Kind
    :param identity: Identity for the resource.
	:type identity: Identity
    :param storage_account_properties: Properties of the storage account.
	:type storage_account_properties: StorageAccountProperties
    """

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'}
        'kind': {'key': 'kind', 'type': 'str'}
        'identity': {'key': 'identity', 'type': 'Identity'}
        'storage_account_properties': {'key': 'storage_account_properties', 'type': 'StorageAccountProperties'}
    }

    def __init__(self, *, sku=None, kind=None, identity=None, storage_account_properties=None, **kwargs) -> None:
        super(StorageAccount, self).__init__(**kwargs)
        self.sku = sku
        self.kind = kind
        self.identity = identity
        self.storage_account_properties = storage_account_properties

class StorageAccountCheckNameAvailabilityParameters(Model):
    """The parameters used to check the availability of the storage account name.

    :param storage_account_check_name_availability_parameters-name: Required. The storage account name.
	:type storage_account_check_name_availability_parameters-name: str
    :param type: Required. The type of resource, Microsoft.Storage/storageAccounts.
	:type type: str or Type
    """

    _validation = {
        'storage_account_check_name_availability_parameters-name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'storage_account_check_name_availability_parameters-name': {'key': 'storage_account_check_name_availability_parameters-name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
    }

    def __init__(self, *, storage_account_check_name_availability_parameters-name: str, type, **kwargs) -> None:
        super(StorageAccountCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.storage_account_check_name_availability_parameters-name = storage_account_check_name_availability_parameters-name
        self.type = type

class StorageAccountCreateParameters(Model):
    """The parameters used when creating a storage account.

    :param sku: Required. The SKU of the storage account.
	:type sku: Sku
    :param kind: Required. Indicates the type of storage account.
	:type kind: str or Kind
    :param storage_account_create_parameters-location: Required. Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
	:type storage_account_create_parameters-location: str
    :param storage_account_create_parameters-tags: Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
	:type storage_account_create_parameters-tags: dict[str, string]
    :param identity: Identity for the resource.
	:type identity: Identity
    :param storage_account_properties_create_parameters: The parameters used to create the storage account.
	:type storage_account_properties_create_parameters: StorageAccountPropertiesCreateParameters
    """

    _validation = {
        'sku': {'required': True},
        'kind': {'required': True},
        'storage_account_create_parameters-location': {'required': True},
    }

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'}
        'kind': {'key': 'kind', 'type': 'str'}
        'storage_account_create_parameters-location': {'key': 'storage_account_create_parameters-location', 'type': 'str'}
        'storage_account_create_parameters-tags': {'key': 'storage_account_create_parameters-tags', 'type': '{string}'}
        'identity': {'key': 'identity', 'type': 'Identity'}
        'storage_account_properties_create_parameters': {'key': 'storage_account_properties_create_parameters', 'type': 'StorageAccountPropertiesCreateParameters'}
    }

    def __init__(self, *, sku, kind, storage_account_create_parameters-location: str, storage_account_create_parameters-tags=None, identity=None, storage_account_properties_create_parameters=None, **kwargs) -> None:
        super(StorageAccountCreateParameters, self).__init__(**kwargs)
        self.sku = sku
        self.kind = kind
        self.storage_account_create_parameters-location = storage_account_create_parameters-location
        self.storage_account_create_parameters-tags = storage_account_create_parameters-tags
        self.identity = identity
        self.storage_account_properties_create_parameters = storage_account_properties_create_parameters

class StorageAccountKey(Model):
    """An access key for the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_account_key-key_name: Name of the key.
	:type storage_account_key-key_name: str
    :ivar storage_account_key-value: Base 64-encoded value of the key.
	:type storage_account_key-value: str
    :ivar key_permission: Permissions for the key -- read-only or full permissions.
	:type key_permission: str or KeyPermission
    """

    _attribute_map = {
        'storage_account_key-key_name': {'key': 'storage_account_key-key_name', 'type': 'str'}
        'storage_account_key-value': {'key': 'storage_account_key-value', 'type': 'str'}
        'key_permission': {'key': 'key_permission', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(StorageAccountKey, self).__init__(**kwargs)
        self.storage_account_key-key_name = None
        self.storage_account_key-value = None
        self.key_permission = None

class StorageAccountListKeysResult(Model):
    """The response from the ListKeys operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_account_list_keys_result-keys: Gets the list of storage account keys and their properties for the specified storage account.
	:type storage_account_list_keys_result-keys: list[object]
    """

    _attribute_map = {
        'storage_account_list_keys_result-keys': {'key': 'storage_account_list_keys_result-keys', 'type': '[object]'}
    }

    def __init__(self, **kwargs) -> None:
        super(StorageAccountListKeysResult, self).__init__(**kwargs)
        self.storage_account_list_keys_result-keys = None

class StorageAccountListResult(Model):
    """The response from the List Storage Accounts operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_account_list_result-value: Gets the list of storage accounts and their properties.
	:type storage_account_list_result-value: list[and]
    :ivar storage_account_list_result-next_link: Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size.
	:type storage_account_list_result-next_link: str
    """

    _attribute_map = {
        'storage_account_list_result-value': {'key': 'storage_account_list_result-value', 'type': '[and]'}
        'storage_account_list_result-next_link': {'key': 'storage_account_list_result-next_link', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(StorageAccountListResult, self).__init__(**kwargs)
        self.storage_account_list_result-value = None
        self.storage_account_list_result-next_link = None

class StorageAccountProperties(Model):
    """Properties of the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: Gets the status of the storage account at the time the operation was called.
	:type provisioning_state: str or ProvisioningState
    :param endpoints: The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
	:type endpoints: Endpoints
    :ivar storage_account_properties-primary_location: Gets the location of the primary data center for the storage account.
	:type storage_account_properties-primary_location: str
    :ivar account_status: Gets the status indicating whether the primary location of the storage account is available or unavailable.
	:type account_status: str or AccountStatus
    :ivar storage_account_properties-last_geo_failover_time: Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
	:type storage_account_properties-last_geo_failover_time: datetime.datetime
    :ivar storage_account_properties-secondary_location: Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
	:type storage_account_properties-secondary_location: str
    :ivar account_status: Gets the status indicating whether the primary location of the storage account is available or unavailable.
	:type account_status: str or AccountStatus
    :ivar storage_account_properties-creation_time: Gets the creation date and time of the storage account in UTC.
	:type storage_account_properties-creation_time: datetime.datetime
    :param custom_domain: The custom domain assigned to this storage account. This can be set via Update.
	:type custom_domain: CustomDomain
    :param endpoints: The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
	:type endpoints: Endpoints
    :param encryption: The encryption settings on the storage account.
	:type encryption: Encryption
    :param access_tier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	:type access_tier: str or AccessTier
    :param azure_files_identity_based_authentication: Settings for Azure Files identity based authentication.
	:type azure_files_identity_based_authentication: AzureFilesIdentityBasedAuthentication
    :param enable_https_traffic_only: Allows https traffic only to storage service if sets to true.
	:type enable_https_traffic_only: bool
    :param network_rule_set: Network rule set.
	:type network_rule_set: NetworkRuleSet
    :param is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
	:type is_hns_enabled: bool
    :param geo_replication_stats: Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.
	:type geo_replication_stats: GeoReplicationStats
    :ivar failover_in_progress: If the failover is in progress, the value will be true, otherwise, it will be null.
	:type failover_in_progress: bool
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioning_state', 'type': 'str'}
        'endpoints': {'key': 'endpoints', 'type': 'Endpoints'}
        'storage_account_properties-primary_location': {'key': 'storage_account_properties-primary_location', 'type': 'str'}
        'account_status': {'key': 'account_status', 'type': 'str'}
        'storage_account_properties-last_geo_failover_time': {'key': 'storage_account_properties-last_geo_failover_time', 'type': 'datetime.datetime'}
        'storage_account_properties-secondary_location': {'key': 'storage_account_properties-secondary_location', 'type': 'str'}
        'account_status': {'key': 'account_status', 'type': 'str'}
        'storage_account_properties-creation_time': {'key': 'storage_account_properties-creation_time', 'type': 'datetime.datetime'}
        'custom_domain': {'key': 'custom_domain', 'type': 'CustomDomain'}
        'endpoints': {'key': 'endpoints', 'type': 'Endpoints'}
        'encryption': {'key': 'encryption', 'type': 'Encryption'}
        'access_tier': {'key': 'access_tier', 'type': 'str'}
        'azure_files_identity_based_authentication': {'key': 'azure_files_identity_based_authentication', 'type': 'AzureFilesIdentityBasedAuthentication'}
        'enable_https_traffic_only': {'key': 'enable_https_traffic_only', 'type': 'bool'}
        'network_rule_set': {'key': 'network_rule_set', 'type': 'NetworkRuleSet'}
        'is_hns_enabled': {'key': 'is_hns_enabled', 'type': 'bool'}
        'geo_replication_stats': {'key': 'geo_replication_stats', 'type': 'GeoReplicationStats'}
        'failover_in_progress': {'key': 'failover_in_progress', 'type': 'bool'}
    }

    def __init__(self, *, endpoints=None, custom_domain=None, endpoints=None, encryption=None, access_tier=None, azure_files_identity_based_authentication=None, enable_https_traffic_only: bool=None, network_rule_set=None, is_hns_enabled: bool=None, geo_replication_stats=None, **kwargs) -> None:
        super(StorageAccountProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.endpoints = endpoints
        self.storage_account_properties-primary_location = None
        self.account_status = None
        self.storage_account_properties-last_geo_failover_time = None
        self.storage_account_properties-secondary_location = None
        self.account_status = None
        self.storage_account_properties-creation_time = None
        self.custom_domain = custom_domain
        self.endpoints = endpoints
        self.encryption = encryption
        self.access_tier = access_tier
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.network_rule_set = network_rule_set
        self.is_hns_enabled = is_hns_enabled
        self.geo_replication_stats = geo_replication_stats
        self.failover_in_progress = None

class StorageAccountPropertiesCreateParameters(Model):
    """The parameters used to create the storage account.

    :param custom_domain: The custom domain assigned to this storage account. This can be set via Update.
	:type custom_domain: CustomDomain
    :param encryption: The encryption settings on the storage account.
	:type encryption: Encryption
    :param network_rule_set: Network rule set.
	:type network_rule_set: NetworkRuleSet
    :param access_tier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	:type access_tier: str or AccessTier
    :param azure_files_identity_based_authentication: Settings for Azure Files identity based authentication.
	:type azure_files_identity_based_authentication: AzureFilesIdentityBasedAuthentication
    :param enable_https_traffic_only: Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01.
	:type enable_https_traffic_only: bool
    :param is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
	:type is_hns_enabled: bool
    """

    _attribute_map = {
        'custom_domain': {'key': 'custom_domain', 'type': 'CustomDomain'}
        'encryption': {'key': 'encryption', 'type': 'Encryption'}
        'network_rule_set': {'key': 'network_rule_set', 'type': 'NetworkRuleSet'}
        'access_tier': {'key': 'access_tier', 'type': 'str'}
        'azure_files_identity_based_authentication': {'key': 'azure_files_identity_based_authentication', 'type': 'AzureFilesIdentityBasedAuthentication'}
        'enable_https_traffic_only': {'key': 'enable_https_traffic_only', 'type': 'bool'}
        'is_hns_enabled': {'key': 'is_hns_enabled', 'type': 'bool'}
    }

    def __init__(self, *, custom_domain=None, encryption=None, network_rule_set=None, access_tier=None, azure_files_identity_based_authentication=None, enable_https_traffic_only: bool=None, is_hns_enabled: bool=None, **kwargs) -> None:
        super(StorageAccountPropertiesCreateParameters, self).__init__(**kwargs)
        self.custom_domain = custom_domain
        self.encryption = encryption
        self.network_rule_set = network_rule_set
        self.access_tier = access_tier
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.is_hns_enabled = is_hns_enabled

class StorageAccountPropertiesUpdateParameters(Model):
    """The parameters used when updating a storage account.

    :param custom_domain: The custom domain assigned to this storage account. This can be set via Update.
	:type custom_domain: CustomDomain
    :param encryption: The encryption settings on the storage account.
	:type encryption: Encryption
    :param access_tier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	:type access_tier: str or AccessTier
    :param azure_files_identity_based_authentication: Settings for Azure Files identity based authentication.
	:type azure_files_identity_based_authentication: AzureFilesIdentityBasedAuthentication
    :param enable_https_traffic_only: Allows https traffic only to storage service if sets to true.
	:type enable_https_traffic_only: bool
    :param network_rule_set: Network rule set.
	:type network_rule_set: NetworkRuleSet
    """

    _attribute_map = {
        'custom_domain': {'key': 'custom_domain', 'type': 'CustomDomain'}
        'encryption': {'key': 'encryption', 'type': 'Encryption'}
        'access_tier': {'key': 'access_tier', 'type': 'str'}
        'azure_files_identity_based_authentication': {'key': 'azure_files_identity_based_authentication', 'type': 'AzureFilesIdentityBasedAuthentication'}
        'enable_https_traffic_only': {'key': 'enable_https_traffic_only', 'type': 'bool'}
        'network_rule_set': {'key': 'network_rule_set', 'type': 'NetworkRuleSet'}
    }

    def __init__(self, *, custom_domain=None, encryption=None, access_tier=None, azure_files_identity_based_authentication=None, enable_https_traffic_only: bool=None, network_rule_set=None, **kwargs) -> None:
        super(StorageAccountPropertiesUpdateParameters, self).__init__(**kwargs)
        self.custom_domain = custom_domain
        self.encryption = encryption
        self.access_tier = access_tier
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.network_rule_set = network_rule_set

class StorageAccountRegenerateKeyParameters(Model):
    """The parameters used to regenerate the storage account key.

    :param storage_account_regenerate_key_parameters-key_name: Required. The name of storage keys that want to be regenerated, possible values are key1, key2.
	:type storage_account_regenerate_key_parameters-key_name: str
    """

    _validation = {
        'storage_account_regenerate_key_parameters-key_name': {'required': True},
    }

    _attribute_map = {
        'storage_account_regenerate_key_parameters-key_name': {'key': 'storage_account_regenerate_key_parameters-key_name', 'type': 'str'}
    }

    def __init__(self, *, storage_account_regenerate_key_parameters-key_name: str, **kwargs) -> None:
        super(StorageAccountRegenerateKeyParameters, self).__init__(**kwargs)
        self.storage_account_regenerate_key_parameters-key_name = storage_account_regenerate_key_parameters-key_name

class StorageAccountUpdateParameters(Model):
    """The parameters that can be provided when updating the storage account properties.

    :param sku: The SKU of the storage account.
	:type sku: Sku
    :param storage_account_update_parameters-tags: Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
	:type storage_account_update_parameters-tags: dict[str, string]
    :param identity: Identity for the resource.
	:type identity: Identity
    :param storage_account_properties_update_parameters: The parameters used when updating a storage account.
	:type storage_account_properties_update_parameters: StorageAccountPropertiesUpdateParameters
    :param kind: Indicates the type of storage account.
	:type kind: str or Kind
    """

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'}
        'storage_account_update_parameters-tags': {'key': 'storage_account_update_parameters-tags', 'type': '{string}'}
        'identity': {'key': 'identity', 'type': 'Identity'}
        'storage_account_properties_update_parameters': {'key': 'storage_account_properties_update_parameters', 'type': 'StorageAccountPropertiesUpdateParameters'}
        'kind': {'key': 'kind', 'type': 'str'}
    }

    def __init__(self, *, sku=None, storage_account_update_parameters-tags=None, identity=None, storage_account_properties_update_parameters=None, kind=None, **kwargs) -> None:
        super(StorageAccountUpdateParameters, self).__init__(**kwargs)
        self.sku = sku
        self.storage_account_update_parameters-tags = storage_account_update_parameters-tags
        self.identity = identity
        self.storage_account_properties_update_parameters = storage_account_properties_update_parameters
        self.kind = kind

class StorageSkuListResult(Model):
    """The response from the List Storage SKUs operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_sku_list_result-value: Get the list result of storage SKUs and their properties.
	:type storage_sku_list_result-value: list[object]
    """

    _attribute_map = {
        'storage_sku_list_result-value': {'key': 'storage_sku_list_result-value', 'type': '[object]'}
    }

    def __init__(self, **kwargs) -> None:
        super(StorageSkuListResult, self).__init__(**kwargs)
        self.storage_sku_list_result-value = None

class TrackedResource(Model):
    """The resource model definition for a ARM tracked top level resource

    :param tracked_resource-tags: Resource tags.
	:type tracked_resource-tags: dict[str, string]
    :param tracked_resource-location: Required. The geo-location where the resource lives.
	:type tracked_resource-location: str
    """

    _validation = {
        'tracked_resource-location': {'required': True},
    }

    _attribute_map = {
        'tracked_resource-tags': {'key': 'tracked_resource-tags', 'type': '{string}'}
        'tracked_resource-location': {'key': 'tracked_resource-location', 'type': 'str'}
    }

    def __init__(self, *, tracked_resource-tags=None, tracked_resource-location: str, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.tracked_resource-tags = tracked_resource-tags
        self.tracked_resource-location = tracked_resource-location

class Usage(Model):
    """Describes Storage Resource Usage.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar usage_unit: Gets the unit of measurement.
	:type usage_unit: str or UsageUnit
    :ivar current_value: Gets the current count of the allocated resources in the subscription.
	:type current_value: int
    :ivar limit: Gets the maximum count of the resources that can be allocated in the subscription.
	:type limit: int
    :param usage_name: The usage names that can be used; currently limited to StorageAccount.
	:type usage_name: UsageName
    """

    _attribute_map = {
        'usage_unit': {'key': 'usage_unit', 'type': 'str'}
        'current_value': {'key': 'current_value', 'type': 'int'}
        'limit': {'key': 'limit', 'type': 'int'}
        'usage_name': {'key': 'usage_name', 'type': 'UsageName'}
    }

    def __init__(self, *, usage_name=None, **kwargs) -> None:
        super(Usage, self).__init__(**kwargs)
        self.usage_unit = None
        self.current_value = None
        self.limit = None
        self.usage_name = usage_name

class UsageListResult(Model):
    """The response from the List Usages operation.

    :param usage_list_result-value: Gets or sets the list of Storage Resource Usages.
	:type usage_list_result-value: list[object]
    """

    _attribute_map = {
        'usage_list_result-value': {'key': 'usage_list_result-value', 'type': '[object]'}
    }

    def __init__(self, *, usage_list_result-value=None, **kwargs) -> None:
        super(UsageListResult, self).__init__(**kwargs)
        self.usage_list_result-value = usage_list_result-value

class UsageName(Model):
    """The usage names that can be used; currently limited to StorageAccount.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar usage_name-value: Gets a string describing the resource name.
	:type usage_name-value: str
    :ivar usage_name-localized_value: Gets a localized string describing the resource name.
	:type usage_name-localized_value: str
    """

    _attribute_map = {
        'usage_name-value': {'key': 'usage_name-value', 'type': 'str'}
        'usage_name-localized_value': {'key': 'usage_name-localized_value', 'type': 'str'}
    }

    def __init__(self, **kwargs) -> None:
        super(UsageName, self).__init__(**kwargs)
        self.usage_name-value = None
        self.usage_name-localized_value = None

class VirtualNetworkRule(Model):
    """Virtual Network rule.

    :param virtual_network_resource_id: Required. Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	:type virtual_network_resource_id: str
    :param action: The action of virtual network rule.
	:type action: str or Action
    :param state: Gets the state of virtual network rule.
	:type state: str or State
    """

    _validation = {
        'virtual_network_resource_id': {'required': True},
    }

    _attribute_map = {
        'virtual_network_resource_id': {'key': 'virtual_network_resource_id', 'type': 'str'}
        'action': {'key': 'action', 'type': 'str'}
        'state': {'key': 'state', 'type': 'str'}
    }

    def __init__(self, *, virtual_network_resource_id: str, action=None, state=None, **kwargs) -> None:
        super(VirtualNetworkRule, self).__init__(**kwargs)
        self.virtual_network_resource_id = virtual_network_resource_id
        self.action = action
        self.state = state