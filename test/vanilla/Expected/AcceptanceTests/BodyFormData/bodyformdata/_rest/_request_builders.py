# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, IO, List, Optional

_SERIALIZER = Serializer()


def build_formdata_upload_file_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Upload file.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword files: File to upload.
    :paramtype files: IO
    :keyword data: File name to upload. Name has to be spelled exactly as written here.
    :paramtype data: str
    :keyword content: File to upload.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/octet-stream, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/formdata/stream/uploadfile")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_formdata_upload_file_via_body_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Upload file.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword content: File to upload.
    :paramtype content: IO
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/octet-stream, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/formdata/stream/uploadfile")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, **kwargs)


def build_formdata_upload_files_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Upload multiple files.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword files: Files to upload.
    :paramtype files: list[IO]
    :keyword content: Files to upload.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/octet-stream, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/formdata/stream/uploadfiles")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)
