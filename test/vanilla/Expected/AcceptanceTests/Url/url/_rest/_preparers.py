# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, List, Optional, Union

_SERIALIZER = Serializer()


def prepare_paths_get_boolean_true(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get true Boolean value on path.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    bool_path = True
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/bool/true/{boolPath}")
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_get_boolean_false(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get false Boolean value on path.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    bool_path = False
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/bool/false/{boolPath}")
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_get_int_one_million(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '1000000' integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    int_path = 1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/1000000/{intPath}")
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_get_int_negative_one_million(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-1000000' integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    int_path = -1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/-1000000/{intPath}")
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_get_ten_billion(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '10000000000' 64 bit integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    long_path = 10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/long/10000000000/{longPath}")
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_get_negative_ten_billion(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-10000000000' 64 bit integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    long_path = -10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/long/-10000000000/{longPath}")
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_float_scientific_positive(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '1.034E+20' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    float_path = 103400000000000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/float/1.034E+20/{floatPath}")
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_float_scientific_negative(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-1.034E-20' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    float_path = -1.034e-20
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/float/-1.034E-20/{floatPath}")
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_double_decimal_positive(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '9999999.999' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    double_path = 9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/double/9999999.999/{doublePath}")
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_double_decimal_negative(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-9999999.999' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    double_path = -9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/double/-9999999.999/{doublePath}")
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_string_unicode(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_path = "啊齄丂狛狜隣郎隣兀﨩"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/unicode/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_string_url_encoded(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get 'begin!*'();:@ &=+$,/?#[]end.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_path = "begin!*'();:@ &=+$,/?#[]end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url", "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"
    )
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_string_url_non_encoded(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get 'begin!*'();:@&=+$,end.

    https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_path = "begin!*'();:@&=+$,end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/begin!*'();:@&=+$,end/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str", skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_string_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get ''.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_path = ""
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/empty/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_string_null(
    string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null (should throw).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param string_path: null string value.
    :type string_path: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/null/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_enum_valid(
    enum_path,  # type: Union[str, "_models.UriColor"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get using uri with 'green color' in path parameter.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param enum_path: send the value green.
    :type enum_path: str or ~url.models.UriColor
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/enum/green%20color/{enumPath}")
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_enum_null(
    enum_path,  # type: Union[str, "_models.UriColor"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null (should throw on the client before the request is sent on wire).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param enum_path: send null should throw.
    :type enum_path: str or ~url.models.UriColor
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/null/{enumPath}")
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_byte_multi_byte(
    byte_path,  # type: bytearray
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param byte_path: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
    :type byte_path: bytearray
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/multibyte/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_byte_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '' as byte array.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    byte_path = bytearray("", encoding="utf-8")
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/empty/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_byte_null(
    byte_path,  # type: bytearray
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as byte array (should throw).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param byte_path: null as byte array (should throw).
    :type byte_path: bytearray
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/null/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_date_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '2012-01-01' as date.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_path = "2012-01-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/date/2012-01-01/{datePath}")
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_date_null(
    date_path,  # type: datetime.date
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as date - this should throw or be unusable on the client side, depending on date
    representation.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param date_path: null as date (should throw).
    :type date_path: ~datetime.date
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/date/null/{datePath}")
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_date_time_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '2012-01-01T01:01:01Z' as date-time.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_time_path = "2012-01-01T01:01:01Z"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}")
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_date_time_null(
    date_time_path,  # type: datetime.datetime
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as date-time, should be disallowed or throw depending on representation of date-time.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param date_time_path: null as date-time.
    :type date_time_path: ~datetime.datetime
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/datetime/null/{dateTimePath}")
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_base64_url(
    base64_url_path,  # type: bytes
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get 'lorem' encoded value as 'bG9yZW0' (base64url).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param base64_url_path: base64url encoded value.
    :type base64_url_path: bytes
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/bG9yZW0/{base64UrlPath}")
    path_format_arguments = {
        "base64UrlPath": _SERIALIZER.url("base64_url_path", base64_url_path, "base64"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_array_csv_in_path(
    array_path,  # type: List[str]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-
    array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_path: an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, '']
     using the csv-array format.
    :type array_path: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}",
    )
    path_format_arguments = {
        "arrayPath": _SERIALIZER.url("array_path", array_path, "[str]", div=","),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_paths_unix_time_url(
    unix_time_url_path,  # type: datetime.datetime
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get the date 2016-04-13 encoded value as '1460505600' (Unix time).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param unix_time_url_path: Unix time encoded value.
    :type unix_time_url_path: ~datetime.datetime
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/1460505600/{unixTimeUrlPath}")
    path_format_arguments = {
        "unixTimeUrlPath": _SERIALIZER.url("unix_time_url_path", unix_time_url_path, "unix-time"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
    )


def prepare_queries_get_boolean_true(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get true Boolean value on path.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    bool_query = True
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/true")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_boolean_false(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get false Boolean value on path.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    bool_query = False
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/false")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_boolean_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null Boolean value on query (query string should be absent).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param bool_query: null boolean value.
    :type bool_query: bool
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    bool_query = kwargs.pop("bool_query", None)  # type: Optional[bool]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if bool_query is not None:
        query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_int_one_million(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '1000000' integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    int_query = 1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/1000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_int_negative_one_million(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-1000000' integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    int_query = -1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/-1000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_int_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null integer value (no query parameter).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param int_query: null integer value.
    :type int_query: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    int_query = kwargs.pop("int_query", None)  # type: Optional[int]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if int_query is not None:
        query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_ten_billion(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '10000000000' 64 bit integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    long_query = 10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/10000000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_negative_ten_billion(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-10000000000' 64 bit integer value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    long_query = -10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/-10000000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_get_long_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get 'null 64 bit integer value (no query param in uri).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param long_query: null 64 bit integer value.
    :type long_query: long
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    long_query = kwargs.pop("long_query", None)  # type: Optional[int]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if long_query is not None:
        query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_float_scientific_positive(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '1.034E+20' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    float_query = 103400000000000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/1.034E+20")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_float_scientific_negative(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-1.034E-20' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    float_query = -1.034e-20
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/-1.034E-20")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_float_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null numeric value (no query parameter).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param float_query: null numeric value.
    :type float_query: float
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    float_query = kwargs.pop("float_query", None)  # type: Optional[float]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if float_query is not None:
        query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_double_decimal_positive(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '9999999.999' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    double_query = 9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/9999999.999")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_double_decimal_negative(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '-9999999.999' numeric value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    double_query = -9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/-9999999.999")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_double_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null numeric value (no query parameter).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param double_query: null numeric value.
    :type double_query: float
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    double_query = kwargs.pop("double_query", None)  # type: Optional[float]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if double_query is not None:
        query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_string_unicode(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_query = "啊齄丂狛狜隣郎隣兀﨩"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/unicode/")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_string_url_encoded(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get 'begin!*'();:@ &=+$,/?#[]end.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_query = "begin!*'();:@ &=+$,/?#[]end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url", "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"
    )

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_string_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get ''.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_query = ""
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_string_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null (no query parameter in url).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param string_query: null string value.
    :type string_query: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    string_query = kwargs.pop("string_query", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if string_query is not None:
        query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_enum_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get using uri with query parameter 'green color'.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param enum_query: 'green color' enum value.
    :type enum_query: str or ~url.models.UriColor
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    enum_query = kwargs.pop("enum_query", None)  # type: Optional[Union[str, "_models.UriColor"]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/enum/green%20color")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_enum_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null (no query parameter in url).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param enum_query: null string value.
    :type enum_query: str or ~url.models.UriColor
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    enum_query = kwargs.pop("enum_query", None)  # type: Optional[Union[str, "_models.UriColor"]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/enum/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_byte_multi_byte(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param byte_query: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
    :type byte_query: bytearray
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    byte_query = kwargs.pop("byte_query", None)  # type: Optional[bytearray]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/multibyte")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_byte_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '' as byte array.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    byte_query = bytearray("", encoding="utf-8")
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_byte_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as byte array (no query parameters in uri).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param byte_query: null as byte array (no query parameters in uri).
    :type byte_query: bytearray
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    byte_query = kwargs.pop("byte_query", None)  # type: Optional[bytearray]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_date_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '2012-01-01' as date.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_query = "2012-01-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/date/2012-01-01")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_date_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as date - this should result in no query parameters in uri.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param date_query: null as date (no query parameters in uri).
    :type date_query: ~datetime.date
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_query = kwargs.pop("date_query", None)  # type: Optional[datetime.date]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/date/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if date_query is not None:
        query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_date_time_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get '2012-01-01T01:01:01Z' as date-time.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_time_query = "2012-01-01T01:01:01Z"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/datetime/2012-01-01T01%3A01%3A01Z")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_date_time_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get null as date-time, should result in no query parameters in uri.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param date_time_query: null as date-time (no query parameters).
    :type date_time_query: ~datetime.datetime
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    date_time_query = kwargs.pop("date_time_query", None)  # type: Optional[datetime.datetime]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/datetime/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if date_time_query is not None:
        query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_csv_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-
    array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
     ''] using the csv-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_csv_null(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get a null array of string using the csv-array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: a null array of string using the csv-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_csv_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an empty array [] of string using the csv-array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: an empty array [] of string using the csv-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_no_collection_format_empty(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Array query has no defined collection format, should default to csv. Pass in ['hello', 'nihao',
    'bonjour'] for the 'arrayQuery' parameter to the service.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: Array-typed query parameter. Pass in ['hello', 'nihao', 'bonjour'].
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/none/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_ssv_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-
    array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
     ''] using the ssv-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/ssv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=" ")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_tsv_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-
    array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
     ''] using the tsv-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/tsv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="	")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_queries_array_string_pipes_valid(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
    pipes-array format.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
     ''] using the pipes-array format.
    :type array_query: list[str]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/pipes/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="|")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_pathitems_get_all_with_values(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
    localStringPath='localStringPath', globalStringQuery='globalStringQuery',
    pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
    :type path_item_string_path: str
    :param global_string_path: A string value 'globalItemStringPath' that appears in the path.
    :type global_string_path: str
    :param local_string_path: should contain value 'localStringPath'.
    :type local_string_path: str
    :param path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
     parameter.
    :type path_item_string_query: str
    :param global_string_query: should contain value null.
    :type global_string_query: str
    :param local_string_query: should contain value 'localStringQuery'.
    :type local_string_query: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
    global_string_query = kwargs.pop("global_string_query", None)  # type: Optional[str]
    local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_pathitems_get_global_query_null(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
    localStringPath='localStringPath', globalStringQuery=null,
    pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
    :type path_item_string_path: str
    :param global_string_path: A string value 'globalItemStringPath' that appears in the path.
    :type global_string_path: str
    :param local_string_path: should contain value 'localStringPath'.
    :type local_string_path: str
    :param path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
     parameter.
    :type path_item_string_query: str
    :param global_string_query: should contain value null.
    :type global_string_query: str
    :param local_string_query: should contain value 'localStringQuery'.
    :type local_string_query: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
    global_string_query = kwargs.pop("global_string_query", None)  # type: Optional[str]
    local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_pathitems_get_global_and_local_query_null(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
    localStringPath='localStringPath', globalStringQuery=null,
    pathItemStringQuery='pathItemStringQuery', localStringQuery=null.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
    :type path_item_string_path: str
    :param global_string_path: A string value 'globalItemStringPath' that appears in the path.
    :type global_string_path: str
    :param local_string_path: should contain value 'localStringPath'.
    :type local_string_path: str
    :param path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
     parameter.
    :type path_item_string_query: str
    :param global_string_query: should contain value null.
    :type global_string_query: str
    :param local_string_query: should contain null value.
    :type local_string_query: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
    global_string_query = kwargs.pop("global_string_query", None)  # type: Optional[str]
    local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )


def prepare_pathitems_get_local_path_item_query_null(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
    localStringPath='localStringPath', globalStringQuery='globalStringQuery',
    pathItemStringQuery=null, localStringQuery=null.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
    :type path_item_string_path: str
    :param global_string_path: A string value 'globalItemStringPath' that appears in the path.
    :type global_string_path: str
    :param local_string_path: should contain value 'localStringPath'.
    :type local_string_path: str
    :param path_item_string_query: should contain value null.
    :type path_item_string_query: str
    :param global_string_query: should contain value null.
    :type global_string_query: str
    :param local_string_query: should contain value null.
    :type local_string_query: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
    global_string_query = kwargs.pop("global_string_query", None)  # type: Optional[str]
    local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
    )
