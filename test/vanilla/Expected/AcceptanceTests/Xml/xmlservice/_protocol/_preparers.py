# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import List, Optional

_SERIALIZER = Serializer()

import xml.etree.ElementTree as ET


def _request(
    method,
    url,
    params=None,
    headers=None,
    content=None,
    form_content=None,
    stream_content=None,
):
    request = HttpRequest(method, url, headers=headers)

    if params:
        request.format_parameters(params)

    if content is not None:
        content_type = request.headers.get("Content-Type")
        if isinstance(content, ET.Element):
            request.set_xml_body(content)
        # https://github.com/Azure/azure-sdk-for-python/issues/12137
        # A string is valid JSON, make the difference between text
        # and a plain JSON string.
        # Content-Type is a good indicator of intent from user
        elif content_type and content_type.startswith("text/"):
            request.set_text_body(content)
        else:
            try:
                request.set_json_body(content)
            except TypeError:
                request.data = content

    if form_content:
        request.set_formdata_body(form_content)
    elif stream_content:
        request.set_streamed_data_body(stream_content)

    return request


def prepare_xml_get_complex_type_ref_no_meta(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-no-meta")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_complex_type_ref_no_meta(
    body,  # type: "_models.RootWithRefAndNoMeta"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-no-meta")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_complex_type_ref_with_meta(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-with-meta")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_complex_type_ref_with_meta(
    body,  # type: "_models.RootWithRefAndMeta"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-with-meta")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_simple(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/simple")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_simple(
    body,  # type: "_models.Slideshow"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/simple")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_wrapped_lists(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/wrapped-lists")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_wrapped_lists(
    body,  # type: "_models.AppleBarrel"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/wrapped-lists")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_headers(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest

    # Construct URL
    url = kwargs.pop("template_url", "/xml/headers")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_get_empty_list(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_empty_list(
    body,  # type: "_models.Slideshow"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_empty_wrapped_lists(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-wrapped-lists")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_empty_wrapped_lists(
    body,  # type: "_models.AppleBarrel"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-wrapped-lists")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_root_list(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_root_list(
    body,  # type: List["_models.Banana"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_root_list_single_item(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list-single-item")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_root_list_single_item(
    body,  # type: List["_models.Banana"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list-single-item")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_empty_root_list(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-root-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_empty_root_list(
    body,  # type: List["_models.Banana"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-root-list")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_empty_child_element(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-child-element")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_empty_child_element(
    body,  # type: "_models.Banana"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-child-element")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_list_containers(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "list"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_get_service_properties(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "properties"
    restype = "service"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_service_properties(
    body,  # type: "_models.StorageServiceProperties"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "properties"
    restype = "service"
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_acls(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "acl"
    restype = "container"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_acls(
    body,  # type: List["_models.SignedIdentifier"]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "acl"
    restype = "container"
    content_type = kwargs.pop("content_type", "application/xml")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_list_blobs(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    comp = "list"
    restype = "container"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_json_input(
    body,  # type: "_models.JSONInput"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/json")

    # Construct URL
    url = kwargs.pop("template_url", "/xml/jsoninput")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_json_output(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/jsonoutput")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_get_xms_text(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/x-ms-text")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_get_bytes(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/bytes")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_binary(
    body,  # type: "_models.ModelWithByteProperty"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/bytes")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)


def prepare_xml_get_uri(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/url")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def prepare_xml_put_uri(
    body,  # type: "_models.ModelWithUrlProperty"
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type", "application/xml")
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", "/xml/url")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body

    return _request("PUT", url, query_parameters, header_parameters, **body_content_kwargs)
