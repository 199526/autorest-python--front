# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class XmlOperations:
    """XmlOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~xmlservice.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def _get_complex_type_ref_no_meta_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_complex_type_ref_no_meta_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_complex_type_ref_no_meta_request.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    @distributed_trace_async
    async def get_complex_type_ref_no_meta(self, **kwargs: Any) -> "_models.RootWithRefAndNoMeta":
        """Get a complex type that has a ref to a complex type with no XML node.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndNoMeta, or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndNoMeta
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RootWithRefAndNoMeta"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_complex_type_ref_no_meta_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("RootWithRefAndNoMeta", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_type_ref_no_meta.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    def _put_complex_type_ref_no_meta_request(self, body: "_models.RootWithRefAndNoMeta", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_complex_type_ref_no_meta_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "RootWithRefAndNoMeta", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_complex_type_ref_no_meta_request.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    @distributed_trace_async
    async def put_complex_type_ref_no_meta(self, model: "_models.RootWithRefAndNoMeta", **kwargs: Any) -> None:
        """Puts a complex type that has a ref to a complex type with no XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndNoMeta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = model
        request = self._put_complex_type_ref_no_meta_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_type_ref_no_meta.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    def _get_complex_type_ref_with_meta_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_complex_type_ref_with_meta_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_complex_type_ref_with_meta_request.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    @distributed_trace_async
    async def get_complex_type_ref_with_meta(self, **kwargs: Any) -> "_models.RootWithRefAndMeta":
        """Get a complex type that has a ref to a complex type with XML node.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndMeta, or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndMeta
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RootWithRefAndMeta"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_complex_type_ref_with_meta_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("RootWithRefAndMeta", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_type_ref_with_meta.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    def _put_complex_type_ref_with_meta_request(self, body: "_models.RootWithRefAndMeta", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_complex_type_ref_with_meta_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "RootWithRefAndMeta", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_complex_type_ref_with_meta_request.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    @distributed_trace_async
    async def put_complex_type_ref_with_meta(self, model: "_models.RootWithRefAndMeta", **kwargs: Any) -> None:
        """Puts a complex type that has a ref to a complex type with XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndMeta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = model
        request = self._put_complex_type_ref_with_meta_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_type_ref_with_meta.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    def _get_simple_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_simple_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_simple_request.metadata = {"url": "/xml/simple"}  # type: ignore

    @distributed_trace_async
    async def get_simple(self, **kwargs: Any) -> "_models.Slideshow":
        """Get a simple XML document.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow, or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Slideshow"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_simple_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("Slideshow", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_simple.metadata = {"url": "/xml/simple"}  # type: ignore

    def _put_simple_request(self, body: "_models.Slideshow", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._put_simple_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "Slideshow", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_simple_request.metadata = {"url": "/xml/simple"}  # type: ignore

    @distributed_trace_async
    async def put_simple(self, slideshow: "_models.Slideshow", **kwargs: Any) -> None:
        """Put a simple XML document.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = slideshow
        request = self._put_simple_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_simple.metadata = {"url": "/xml/simple"}  # type: ignore

    def _get_wrapped_lists_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_wrapped_lists_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_wrapped_lists_request.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    @distributed_trace_async
    async def get_wrapped_lists(self, **kwargs: Any) -> "_models.AppleBarrel":
        """Get an XML document with multiple wrapped lists.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel, or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.AppleBarrel"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_wrapped_lists_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("AppleBarrel", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_wrapped_lists.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    def _put_wrapped_lists_request(self, body: "_models.AppleBarrel", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._put_wrapped_lists_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "AppleBarrel", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_wrapped_lists_request.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    @distributed_trace_async
    async def put_wrapped_lists(self, wrapped_lists: "_models.AppleBarrel", **kwargs: Any) -> None:
        """Put an XML document with multiple wrapped lists.

        :param wrapped_lists:
        :type wrapped_lists: ~xmlservice.models.AppleBarrel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = wrapped_lists
        request = self._put_wrapped_lists_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_wrapped_lists.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    def _get_headers_request(self, **kwargs: Any) -> HttpRequest:

        # Construct URL
        url = kwargs.pop("template_url", self._get_headers_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        return self._client.get(url, query_parameters, header_parameters)

    _get_headers_request.metadata = {"url": "/xml/headers"}  # type: ignore

    @distributed_trace_async
    async def get_headers(self, **kwargs: Any) -> None:
        """Get strongly-typed response headers.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_headers_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Custom-Header"] = self._deserialize("str", response.headers.get("Custom-Header"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    get_headers.metadata = {"url": "/xml/headers"}  # type: ignore

    def _get_empty_list_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_empty_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_empty_list_request.metadata = {"url": "/xml/empty-list"}  # type: ignore

    @distributed_trace_async
    async def get_empty_list(self, **kwargs: Any) -> "_models.Slideshow":
        """Get an empty list.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow, or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Slideshow"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_empty_list_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("Slideshow", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_list.metadata = {"url": "/xml/empty-list"}  # type: ignore

    def _put_empty_list_request(self, body: "_models.Slideshow", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_empty_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "Slideshow", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_empty_list_request.metadata = {"url": "/xml/empty-list"}  # type: ignore

    @distributed_trace_async
    async def put_empty_list(self, slideshow: "_models.Slideshow", **kwargs: Any) -> None:
        """Puts an empty list.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = slideshow
        request = self._put_empty_list_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_list.metadata = {"url": "/xml/empty-list"}  # type: ignore

    def _get_empty_wrapped_lists_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_empty_wrapped_lists_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_empty_wrapped_lists_request.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    @distributed_trace_async
    async def get_empty_wrapped_lists(self, **kwargs: Any) -> "_models.AppleBarrel":
        """Gets some empty wrapped lists.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel, or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.AppleBarrel"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_empty_wrapped_lists_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("AppleBarrel", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_wrapped_lists.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    def _put_empty_wrapped_lists_request(self, body: "_models.AppleBarrel", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_empty_wrapped_lists_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "AppleBarrel", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_empty_wrapped_lists_request.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    @distributed_trace_async
    async def put_empty_wrapped_lists(self, apple_barrel: "_models.AppleBarrel", **kwargs: Any) -> None:
        """Puts some empty wrapped lists.

        :param apple_barrel:
        :type apple_barrel: ~xmlservice.models.AppleBarrel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = apple_barrel
        request = self._put_empty_wrapped_lists_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_wrapped_lists.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    def _get_root_list_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_root_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_root_list_request.metadata = {"url": "/xml/root-list"}  # type: ignore

    @distributed_trace_async
    async def get_root_list(self, **kwargs: Any) -> List["_models.Banana"]:
        """Gets a list as the root element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_root_list_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_root_list.metadata = {"url": "/xml/root-list"}  # type: ignore

    def _put_root_list_request(self, body: List["_models.Banana"], **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_root_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        body_content = self._serialize.body(body, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_root_list_request.metadata = {"url": "/xml/root-list"}  # type: ignore

    @distributed_trace_async
    async def put_root_list(self, bananas: List["_models.Banana"], **kwargs: Any) -> None:
        """Puts a list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = bananas
        request = self._put_root_list_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_root_list.metadata = {"url": "/xml/root-list"}  # type: ignore

    def _get_root_list_single_item_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_root_list_single_item_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_root_list_single_item_request.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    @distributed_trace_async
    async def get_root_list_single_item(self, **kwargs: Any) -> List["_models.Banana"]:
        """Gets a list with a single item.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_root_list_single_item_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_root_list_single_item.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    def _put_root_list_single_item_request(self, body: List["_models.Banana"], **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_root_list_single_item_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        body_content = self._serialize.body(body, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_root_list_single_item_request.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    @distributed_trace_async
    async def put_root_list_single_item(self, bananas: List["_models.Banana"], **kwargs: Any) -> None:
        """Puts a list with a single item.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = bananas
        request = self._put_root_list_single_item_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_root_list_single_item.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    def _get_empty_root_list_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_empty_root_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_empty_root_list_request.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    @distributed_trace_async
    async def get_empty_root_list(self, **kwargs: Any) -> List["_models.Banana"]:
        """Gets an empty list as the root element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_empty_root_list_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_root_list.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    def _put_empty_root_list_request(self, body: List["_models.Banana"], **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_empty_root_list_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        body_content = self._serialize.body(body, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_empty_root_list_request.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    @distributed_trace_async
    async def put_empty_root_list(self, bananas: List["_models.Banana"], **kwargs: Any) -> None:
        """Puts an empty list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = bananas
        request = self._put_empty_root_list_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_root_list.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    def _get_empty_child_element_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_empty_child_element_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_empty_child_element_request.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    @distributed_trace_async
    async def get_empty_child_element(self, **kwargs: Any) -> "_models.Banana":
        """Gets an XML document with an empty child element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Banana, or the result of cls(response)
        :rtype: ~xmlservice.models.Banana
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Banana"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_empty_child_element_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("Banana", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_child_element.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    def _put_empty_child_element_request(self, body: "_models.Banana", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_empty_child_element_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "Banana", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_empty_child_element_request.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    @distributed_trace_async
    async def put_empty_child_element(self, banana: "_models.Banana", **kwargs: Any) -> None:
        """Puts a value with an empty child element.

        :param banana:
        :type banana: ~xmlservice.models.Banana
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = banana
        request = self._put_empty_child_element_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_child_element.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    def _list_containers_request(self, **kwargs: Any) -> HttpRequest:
        comp = "list"
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._list_containers_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _list_containers_request.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace_async
    async def list_containers(self, **kwargs: Any) -> "_models.ListContainersResponse":
        """Lists containers in a storage account.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ListContainersResponse, or the result of cls(response)
        :rtype: ~xmlservice.models.ListContainersResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ListContainersResponse"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._list_containers_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ListContainersResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_containers.metadata = {"url": "/xml/"}  # type: ignore

    def _get_service_properties_request(self, **kwargs: Any) -> HttpRequest:
        comp = "properties"
        restype = "service"
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_service_properties_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")
        query_parameters["restype"] = self._serialize.query("restype", restype, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_service_properties_request.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace_async
    async def get_service_properties(self, **kwargs: Any) -> "_models.StorageServiceProperties":
        """Gets storage service properties.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: StorageServiceProperties, or the result of cls(response)
        :rtype: ~xmlservice.models.StorageServiceProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.StorageServiceProperties"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_service_properties_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("StorageServiceProperties", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_service_properties.metadata = {"url": "/xml/"}  # type: ignore

    def _put_service_properties_request(self, body: "_models.StorageServiceProperties", **kwargs: Any) -> HttpRequest:
        comp = "properties"
        restype = "service"
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_service_properties_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")
        query_parameters["restype"] = self._serialize.query("restype", restype, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "StorageServiceProperties", is_xml=True)
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_service_properties_request.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace_async
    async def put_service_properties(self, properties: "_models.StorageServiceProperties", **kwargs: Any) -> None:
        """Puts storage service properties.

        :param properties:
        :type properties: ~xmlservice.models.StorageServiceProperties
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = properties
        request = self._put_service_properties_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_service_properties.metadata = {"url": "/xml/"}  # type: ignore

    def _get_acls_request(self, **kwargs: Any) -> HttpRequest:
        comp = "acl"
        restype = "container"
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_acls_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")
        query_parameters["restype"] = self._serialize.query("restype", restype, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_acls_request.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace_async
    async def get_acls(self, **kwargs: Any) -> List["_models.SignedIdentifier"]:
        """Gets storage ACLs for a container.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of SignedIdentifier, or the result of cls(response)
        :rtype: list[~xmlservice.models.SignedIdentifier]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.SignedIdentifier"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_acls_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[SignedIdentifier]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_acls.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    def _put_acls_request(self, body: List["_models.SignedIdentifier"], **kwargs: Any) -> HttpRequest:
        comp = "acl"
        restype = "container"
        content_type = kwargs.pop("content_type", "application/xml")

        # Construct URL
        url = kwargs.pop("template_url", self._put_acls_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")
        query_parameters["restype"] = self._serialize.query("restype", restype, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        serialization_ctxt = {"xml": {"name": "SignedIdentifiers", "wrapped": True, "itemsName": "SignedIdentifier"}}
        body_content = self._serialize.body(
            body, "[SignedIdentifier]", is_xml=True, serialization_ctxt=serialization_ctxt
        )
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _put_acls_request.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace_async
    async def put_acls(self, properties: List["_models.SignedIdentifier"], **kwargs: Any) -> None:
        """Puts storage ACLs for a container.

        :param properties:
        :type properties: list[~xmlservice.models.SignedIdentifier]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = properties
        request = self._put_acls_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_acls.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    def _list_blobs_request(self, **kwargs: Any) -> HttpRequest:
        comp = "list"
        restype = "container"
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._list_blobs_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["comp"] = self._serialize.query("comp", comp, "str")
        query_parameters["restype"] = self._serialize.query("restype", restype, "str")

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _list_blobs_request.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace_async
    async def list_blobs(self, **kwargs: Any) -> "_models.ListBlobsResponse":
        """Lists blobs in a storage container.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ListBlobsResponse, or the result of cls(response)
        :rtype: ~xmlservice.models.ListBlobsResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ListBlobsResponse"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._list_blobs_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ListBlobsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_blobs.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    def _json_input_request(self, body: "_models.JSONInput", **kwargs: Any) -> HttpRequest:
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = kwargs.pop("template_url", self._json_input_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, "JSONInput")
        body_content_kwargs["content"] = body_content
        return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

    _json_input_request.metadata = {"url": "/xml/jsoninput"}  # type: ignore

    @distributed_trace_async
    async def json_input(self, id: Optional[int] = None, **kwargs: Any) -> None:
        """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
        number 42.

        :param id:
        :type id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        _body = _models.JSONInput(id=id)
        request = self._json_input_request(body=_body, **kwargs)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    json_input.metadata = {"url": "/xml/jsoninput"}  # type: ignore

    def _json_output_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/json"

        # Construct URL
        url = kwargs.pop("template_url", self._json_output_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _json_output_request.metadata = {"url": "/xml/jsonoutput"}  # type: ignore

    @distributed_trace_async
    async def json_output(self, **kwargs: Any) -> "_models.JSONOutput":
        """A Swagger with XML that has one operation that returns JSON. ID number 42.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSONOutput, or the result of cls(response)
        :rtype: ~xmlservice.models.JSONOutput
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.JSONOutput"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._json_output_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("JSONOutput", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    json_output.metadata = {"url": "/xml/jsonoutput"}  # type: ignore

    def _get_xms_text_request(self, **kwargs: Any) -> HttpRequest:
        accept = "application/xml"

        # Construct URL
        url = kwargs.pop("template_url", self._get_xms_text_request.metadata["url"])  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        return self._client.get(url, query_parameters, header_parameters)

    _get_xms_text_request.metadata = {"url": "/xml/x-ms-text"}  # type: ignore

    @distributed_trace_async
    async def get_xms_text(self, **kwargs: Any) -> "_models.ObjectWithXMsTextProperty":
        """Get back an XML object with an x-ms-text property, which should translate to the returned
        object's 'language' property being 'english' and its 'content' property being 'I am text'.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ObjectWithXMsTextProperty, or the result of cls(response)
        :rtype: ~xmlservice.models.ObjectWithXMsTextProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ObjectWithXMsTextProperty"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = self._get_xms_text_request(**kwargs)

        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ObjectWithXMsTextProperty", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_xms_text.metadata = {"url": "/xml/x-ms-text"}  # type: ignore
