# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import TYPE_CHECKING

from azure.core import PipelineClient
from azure.core.rest import HttpResponse, _StreamContextManager
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.rest import HttpRequest

from ._configuration import AutoRestComplexTestServiceConfiguration
from .operations import basicOperations
from .operations import primitiveOperations
from .operations import arrayOperations
from .operations import dictionaryOperations
from .operations import inheritanceOperations
from .operations import polymorphismOperations
from .operations import polymorphicrecursiveOperations
from .operations import readonlypropertyOperations
from .operations import flattencomplexOperations
from . import models


class AutoRestComplexTestService(object):
    """Test Infrastructure for AutoRest.

    :ivar basic: basicOperations operations
    :vartype basic: bodycomplex.operations.basicOperations
    :ivar primitive: primitiveOperations operations
    :vartype primitive: bodycomplex.operations.primitiveOperations
    :ivar array: arrayOperations operations
    :vartype array: bodycomplex.operations.arrayOperations
    :ivar dictionary: dictionaryOperations operations
    :vartype dictionary: bodycomplex.operations.dictionaryOperations
    :ivar inheritance: inheritanceOperations operations
    :vartype inheritance: bodycomplex.operations.inheritanceOperations
    :ivar polymorphism: polymorphismOperations operations
    :vartype polymorphism: bodycomplex.operations.polymorphismOperations
    :ivar polymorphicrecursive: polymorphicrecursiveOperations operations
    :vartype polymorphicrecursive: bodycomplex.operations.polymorphicrecursiveOperations
    :ivar readonlyproperty: readonlypropertyOperations operations
    :vartype readonlyproperty: bodycomplex.operations.readonlypropertyOperations
    :ivar flattencomplex: flattencomplexOperations operations
    :vartype flattencomplex: bodycomplex.operations.flattencomplexOperations
    :param base_url: Service URL
    :type base_url: str
    """

    def __init__(
        self,
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = "http://localhost:3000"
        self._config = AutoRestComplexTestServiceConfiguration(**kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self.basic = basicOperations(self._client, self._config, self._serialize, self._deserialize)
        self.primitive = primitiveOperations(self._client, self._config, self._serialize, self._deserialize)
        self.array = arrayOperations(self._client, self._config, self._serialize, self._deserialize)
        self.dictionary = dictionaryOperations(self._client, self._config, self._serialize, self._deserialize)
        self.inheritance = inheritanceOperations(self._client, self._config, self._serialize, self._deserialize)
        self.polymorphism = polymorphismOperations(self._client, self._config, self._serialize, self._deserialize)
        self.polymorphicrecursive = polymorphicrecursiveOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.readonlyproperty = readonlypropertyOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.flattencomplex = flattencomplexOperations(self._client, self._config, self._serialize, self._deserialize)
        self._serialize = Serializer(client_models)

    def _send_request(self, http_request, **kwargs):
        # type: (HttpRequest, Any) -> HttpResponse
        """Runs the network request through the client's chained policies.

        We have helper methods to create requests specific to this service in `bodycomplex.rest`.
        Use these helper methods to create the request you pass to this method. See our example below:

        >>> from bodycomplex.rest import build_get_valid_request
        >>> request = build_get_valid_request()
        <HttpRequest [GET], url: '/complex/basic/valid'>
        >>> response = client.send_request(request)
        <HttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/llcwiki

        For advanced cases, you can also create your own :class:`~azure.core.rest.HttpRequest`
        and pass it in.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.rest.HttpRequest
        :keyword bool stream_response: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.HttpResponse
        """
        request_copy = deepcopy(http_request)
        request_copy.url = self._client.format_url(request_copy.url)
        if kwargs.pop("stream_response", False):
            return _StreamContextManager(
                client=self._client,
                request=request_copy,
            )
        pipeline_response = self._client._pipeline.run(request_copy._internal_request, **kwargs)
        return HttpResponse(
            status_code=pipeline_response.http_response.status_code,
            request=request_copy,
            _internal_response=pipeline_response.http_response,
        )

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> AutoRestComplexTestService
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
