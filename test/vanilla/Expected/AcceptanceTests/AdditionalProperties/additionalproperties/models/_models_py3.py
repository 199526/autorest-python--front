# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
from msrest.serialization import Model


class PetAPTrue(Model):
    """PetAPTrue.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this collection.
	:type additional_properties: dict[str, ~additionalproperties.models.any]
    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{any}'},
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
    }

    def __init__(self, *, id, additional_properties=None, name=None, **kwargs) -> None:
        super(PetAPTrue, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.name = name
        self.status = None


class CatAPTrue(PetAPTrue):
    """CatAPTrue.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this collection.
	:type additional_properties: dict[str, ~additionalproperties.models.any]
    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    :param friendly:
	:type friendly: bool
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{any}'},
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
        'friendly': {'key': 'friendly', 'type': 'bool'},
    }

    def __init__(self, *, id, additional_properties=None, name=None, friendly=None, **kwargs) -> None:
        super(CatAPTrue, self).__init__(additional_properties=additional_properties, id=id, name=name, **kwargs)
        self.friendly = friendly


class ComponentsSchemasPetaptrueAdditionalproperties(Model):
    """ComponentsSchemasPetaptrueAdditionalproperties.

    """

    _attribute_map = {
    }

    def __init__(self, **kwargs) -> None:
        super(ComponentsSchemasPetaptrueAdditionalproperties, self).__init__(**kwargs)


class Error(Model):
    """Error.

    :param status:
	:type status: int
    :param message:
	:type message: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, status=None, message=None, **kwargs) -> None:
        super(Error, self).__init__(**kwargs)
        self.status = status
        self.message = message
    

    class ErrorException(HttpResponseError):
        """Server responded with exception of type: 'Error'.

        :param deserialize: A deserializer
        :param response: Server response to be deserialized.
        """

        def __init__(self, response, deserialize, *args):

            model_name = 'Error'
            self.error = deserialize(model_name, response)
            if self.error is None:
                self.error = deserialize.dependencies[model_name]()
            super(ErrorException, self).__init__(response=response)


class PetAPInProperties(Model):
    """PetAPInProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    :param additional_properties:
	:type additional_properties: dict[str, float]
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
        'additional_properties': {'key': 'additionalProperties', 'type': '{float}'},
    }

    def __init__(self, *, id, name=None, additional_properties=None, **kwargs) -> None:
        super(PetAPInProperties, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.additional_properties = additional_properties
        self.status = None


class PetAPInPropertiesAdditionalProperties(Model):
    """PetAPInPropertiesAdditionalProperties.

    """

    _attribute_map = {
    }

    def __init__(self, **kwargs) -> None:
        super(PetAPInPropertiesAdditionalProperties, self).__init__(**kwargs)


class PetAPInPropertiesWithAPString(Model):
    """PetAPInPropertiesWithAPString.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this collection.
	:type additional_properties: dict[str, str]
    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    :param odatalocation: Required. 
	:type odatalocation: str
    :param additional_properties:
	:type additional_properties: dict[str, float]
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
        'odatalocation': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
        'odatalocation': {'key': '@odata.location', 'type': 'str'},
        'additional_properties': {'key': 'additionalProperties', 'type': '{float}'},
    }

    def __init__(self, *, id, odatalocation, additional_properties=None, name=None, additional_properties=None, **kwargs) -> None:
        super(PetAPInPropertiesWithAPString, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.name = name
        self.odatalocation = odatalocation
        self.additional_properties = additional_properties
        self.status = None


class PetAPInPropertiesWithAPStringAdditionalProperties(Model):
    """PetAPInPropertiesWithAPStringAdditionalProperties.

    """

    _attribute_map = {
    }

    def __init__(self, **kwargs) -> None:
        super(PetAPInPropertiesWithAPStringAdditionalProperties, self).__init__(**kwargs)


class PetAPObject(Model):
    """PetAPObject.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this collection.
	:type additional_properties: dict[str, ~additionalproperties.models.any]
    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{any}'},
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
    }

    def __init__(self, *, id, additional_properties=None, name=None, **kwargs) -> None:
        super(PetAPObject, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.name = name
        self.status = None


class PetAPString(Model):
    """PetAPString.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this collection.
	:type additional_properties: dict[str, str]
    :param id: Required. 
	:type id: int
    :param name:
	:type name: str
    :ivar status:
	:vartype status: bool
    """

    _validation = {
        'status': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'bool'},
    }

    def __init__(self, *, id, additional_properties=None, name=None, **kwargs) -> None:
        super(PetAPString, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.name = name
        self.status = None
