# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.paging import CallbackPagingMethod, NextLinkPagingMethod
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class PagingOperations:
    """PagingOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~custombaseurlpaging.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def _get_pages_partial_url_initial(self, account_name: str, **kwargs) -> HttpRequest:
        accept = "application/json"

        # Construct URL
        url = self._get_pages_partial_url_initial.metadata["url"]  # type: ignore
        path_format_arguments = {
            "accountName": self._serialize.url("account_name", account_name, "str", skip_quote=True),
            "host": self._serialize.url("self._config.host", self._config.host, "str", skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        request = self._client.get(url, query_parameters, header_parameters)
        return request

    _get_pages_partial_url_initial.metadata = {"url": "/paging/customurl/partialnextlink"}  # type: ignore

    @distributed_trace
    def get_pages_partial_url(self, account_name: str, **kwargs) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that combines custom url, paging and partial URL and expect to concat after
        host.

        :param account_name: Account Name.
        :type account_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword paging_method: The paging strategy to adopt for making requests and processing the
         response. Default is NextLinkPagingMethod. You can pass in
         either an initialized or uninitialized custom paging method. If you pass in an uninitialized
         paging method, make sure your paging method class can input kwargs, as we will initialize your
         paging method with the parameters we would pass into the default paging method + extra kwargs.
        :paramtype paging_method: ~azure.core.paging.PagingMethod
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custombaseurlpaging.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """

        def deserialize_output(pipeline_response):
            return self._deserialize("ProductResult", pipeline_response)

        path_format_arguments = {
            "accountName": self._serialize.url("account_name", account_name, "str", skip_quote=True),
            "host": self._serialize.url("self._config.host", self._config.host, "str", skip_quote=True),
        }

        _initial_request = self._get_pages_partial_url_initial(
            account_name=account_name,
        )

        paging_method = kwargs.pop("paging_method", NextLinkPagingMethod)

        if isinstance(paging_method, type):
            # in here if paging method is not initialized yet.
            paging_method = paging_method(path_format_arguments=path_format_arguments, **kwargs)

        return AsyncItemPaged(
            paging_method=paging_method,
            deserialize_output=deserialize_output,
            client=self._client,
            continuation_token_location="next_link",
            initial_state=_initial_request,
            item_name="values",
            _cls=kwargs.pop("cls", None),
            **kwargs,
        )

    def _get_pages_partial_url_operation_initial(self, account_name: str, **kwargs) -> HttpRequest:
        accept = "application/json"

        # Construct URL
        url = self._get_pages_partial_url_operation_initial.metadata["url"]  # type: ignore
        path_format_arguments = {
            "accountName": self._serialize.url("account_name", account_name, "str", skip_quote=True),
            "host": self._serialize.url("self._config.host", self._config.host, "str", skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        request = self._client.get(url, query_parameters, header_parameters)
        return request

    _get_pages_partial_url_operation_initial.metadata = {"url": "/paging/customurl/partialnextlinkop"}  # type: ignore

    def _get_pages_partial_url_operation_next(self, next_link: str, account_name: str, **kwargs) -> HttpRequest:
        accept = "application/json"

        # Construct URL
        url = self._get_pages_partial_url_operation_next.metadata["url"]  # type: ignore
        path_format_arguments = {
            "nextLink": self._serialize.url("next_link", next_link, "str", skip_quote=True),
            "accountName": self._serialize.url("account_name", account_name, "str", skip_quote=True),
            "host": self._serialize.url("self._config.host", self._config.host, "str", skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        request = self._client.get(url, query_parameters, header_parameters)
        return request

    _get_pages_partial_url_operation_next.metadata = {"url": "/paging/customurl/{nextLink}"}  # type: ignore

    @distributed_trace
    def get_pages_partial_url_operation(self, account_name: str, **kwargs) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that combines custom url, paging and partial URL with next operation.

        :param account_name: Account Name.
        :type account_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword paging_method: The paging strategy to adopt for making requests and processing the
         response. Default is CallbackPagingMethod. You can pass in
         either an initialized or uninitialized custom paging method. If you pass in an uninitialized
         paging method, make sure your paging method class can input kwargs, as we will initialize your
         paging method with the parameters we would pass into the default paging method + extra kwargs.
        :paramtype paging_method: ~azure.core.paging.PagingMethod
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custombaseurlpaging.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """

        def deserialize_output(pipeline_response):
            return self._deserialize("ProductResult", pipeline_response)

        _initial_request = self._get_pages_partial_url_operation_initial(
            account_name=account_name,
        )
        _next_request_callback = functools.partial(
            self._get_pages_partial_url_operation_next,
            account_name=account_name,
        )

        paging_method = kwargs.pop("paging_method", CallbackPagingMethod)

        if isinstance(paging_method, type):
            # in here if paging method is not initialized yet.
            paging_method = paging_method(next_request_callback=_next_request_callback, **kwargs)

        return AsyncItemPaged(
            paging_method=paging_method,
            deserialize_output=deserialize_output,
            client=self._client,
            continuation_token_location="next_link",
            initial_state=_initial_request,
            item_name="values",
            _cls=kwargs.pop("cls", None),
            **kwargs,
        )
