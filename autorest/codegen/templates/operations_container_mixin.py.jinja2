{% set object_base_class = "" if async_mode else "(object)" %}
# coding=utf-8
{{ code_model.options['license_header'] }}
{{ imports }}


{% if not async_mode %}
    {# since we define ClsType outside of the typing section in async mode, we will define it below the AbstractServiceClient in async mode #}
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, {{ "Async" if async_mode else "" }}HttpResponse], T, Dict[str, Any]], Any]]
    
{% endif %}
    class AbstractServiceClient(object):
        """Abstract class of a service client to help with type hints for the following mixin class"""

        def __init__(self):
            # type: () -> None
            """
            Init for abstract service client class
            """

        @property
        def _client(self):
            # type: () -> {{ code_model.service_client.pipeline_class(code_model, async_mode) }}
            """Pipeline client
            :rtype: {{ code_model.service_client.pipeline_class(code_model, async_mode) }}
            """

        @_client.setter
        def _client(self, value):
            # type: ({{ code_model.service_client.pipeline_class(code_model, async_mode) }}) -> None
            """Set the pipeline client"""

        @property
        def _config(self):
            # type: () -> {{ code_model.class_name }}Configuration
            """Configuration of service client
            :rtype: {{ code_model.class_name }}Configuration
            """

        @_config.setter
        def _config(self, value):
            # type: ({{ code_model.class_name }}Configuration) -> None
            """Set the configuration"""

        @property
        def _serialize(self):
            # type: () -> Serializer
            """Serializer
            :rtype: Serializer
            """

        @_serialize.setter
        def _serialize(self, value):
            # type: (Serializer) -> None
            """Set the serializer"""

        @property
        def _deserialize(self):
            # type: () -> Deserializer
            """Deserializer
            :rtype: Deserializer
            """

        @_deserialize.setter
        def _deserialize(self, value):
            # type: (Deserializer) -> None
            """Set the deserializer"""

    # https://github.com/python/mypy/issues/5837
    _MIXIN_BASE = AbstractServiceClient
else:
    _MIXIN_BASE = object

{% if async_mode %}
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, {{ "Async" if async_mode else "" }}HttpResponse], T, Dict[str, Any]], Any]]
{% endif %}

class {{ operation_group.class_name }}(_MIXIN_BASE):
{% for operation in operation_group.operations %}

    {% if is_lro(operation) %}
    {%- macro someop() %}{% include "lro_operation.py.jinja2" %}{% endmacro %}
    {% elif is_paging(operation) %}
    {% macro someop() %}{% include "paging_operation.py.jinja2" %}{% endmacro %}
    {% else %}
    {% macro someop() %}{% include "operation.py.jinja2" %}{% endmacro %}
    {% endif %}
    {{ someop()|indent }}
{% endfor %}