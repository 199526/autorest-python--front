{% import 'operation_tools.jinja2' as op_tools %}
{% import 'lro_operation_helper.jinja2' as helper %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% macro return_docstring(async_mode) %}
:return: An instance of {{ operation.get_poller(async_mode) }} that returns either {{ operation.responses[0].docstring_text }} or the result of cls(response)
:rtype: ~{{ operation.get_poller_path(async_mode)}}[{{ operation.responses[0].docstring_type }}]{% endmacro %}
{% macro operation_docstring(async_mode) %}
{{ helper.operation_docstring_helper(code_model, operation, async_mode) }}
{{ return_docstring(async_mode) }}
:raises ~azure.core.exceptions.HttpResponseError:
{% if operation.has_example_template and code_model.no_models %}

{{ op_tools.get_example_template() }}
    {% if operation.parameters.has_body %}
{{ op_tools.get_json_example_template(operation, operation.parameters.body[0].serialized_name, code_model, serialize_json_dict) | indent(8) }}
{% endif %}
    {% if operation.get_json_response_template_to_status_codes() | first %}
{{ op_tools.get_json_response_template(operation) | indent(8) }}
{% endif %}{% endif %}
"""{% endmacro %}
{# actual template starts here #}
{% if code_model.options['tracing'] %}
{{ trace_decorator }}
{% endif %}
{% set return_type_wrapper = [operation.get_poller(async_mode)] %}
{{ op_tools.operation_method_signature(operation, async_mode=async_mode, coroutine=async_mode, return_type_wrapper=return_type_wrapper) }}
{%- if not async_mode %}
    {{ op_tools.sync_return_type_annotation(operation, return_type_wrapper) }}
{% endif %}
    {{ operation_docstring(async_mode) | indent }}
    {% if not async_mode and operation.parameters.kwargs_to_pop %}

        {% for kwarg in operation.parameters.kwargs_to_pop %}
    {{ kwarg.pop_from_kwarg | indent }}
        {% endfor %}
    {% endif %}
{{ helper.lro_operation(code_model, operation, async_mode) }}

    def get_long_running_output(pipeline_response):
        response = pipeline_response.http_response
        {% if operation.lro_response.has_headers %}
        response_headers = {}
        {% endif %}
        {% if operation.lro_response %}
        {{ op_tools.response_headers_and_deserialization(operation.lro_response, code_model)|indent(8) }}
        {% endif %}
        if cls:
            return cls(pipeline_response, {{ 'deserialized' if operation.lro_response.has_body else 'None'}}, {{ 'response_headers' if operation.lro_response.has_headers else '{}' }})
        {% if operation.lro_response.has_body %}
        return deserialized
        {% endif %}

{{ helper.lro_operation_return(code_model, operation, async_mode) }}
