{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{{ op_tools.preparer_method_signature(preparer, is_python_3_file=is_python_3_file) }}
    {%- if not is_python_3_file %}
    {{ op_tools.sync_return_type_annotation("", return_type="HttpRequest") }}
    {% endif %}
    """{{ preparer.summary if preparer.summary else preparer.description | wordwrap(width=95, break_long_words=False, wrapstring='\n    ') }}
    {% if preparer.summary and preparer.description %}

    {{ preparer.description | wordwrap(width=95, break_long_words=False, wrapstring='\n    ') }}
    {% endif %}

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this preparer into your code flow.

    {% if preparer.deprecated -%}
    .. warning::
        This method is deprecated

    {% endif %}
    {% if preparer.parameters.method %}
    {{ op_tools.method_docstring(preparer.parameters.method, preparer) | indent }}
    {%- endif %}
    {% if (preparer.schema_requests | length) > 1 %}
    {{ op_tools.content_type_docstring(preparer) | indent }}
    {% endif %}
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
{% if not is_python_3_file %}
    {% if preparer.parameters.kwargs %}
        {% for kwarg in preparer.parameters.kwargs %}
    {{ kwarg.pop_from_kwarg }}
        {% endfor %}
    {% endif %}
{% endif %}
{% if preparer.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {% for constant_parameter in preparer.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {% if constant_parameter.serialized_name == "content_type" %}
    content_type = kwargs.pop("content_type", {{ constant_parameter.constant_declaration }})
    {% else %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.constant_declaration }}
    {% endif %}
    {% endfor %}
{% endif %}

    # Construct URL
    url = kwargs.pop("template_url", {{ keywords.escape_str(preparer.url) }})
{% if preparer.parameters.path %}
    {{ op_tools.path_format_arguments(preparer.parameters.path)|indent }}
    url = _format_url_section(url, **path_format_arguments)
{% endif %}

    {{ op_tools.query_parameters(preparer, is_python_3_file)|indent }}
    {{ op_tools.header_parameters(code_model, preparer, is_python_3_file)|indent }}
    {{ op_tools.body_parameters(preparer)|indent }}
    {{ op_tools.create_http_request(preparer)|indent }}
