{% import 'operation_tools.jinja2' as op_tools %}
{% macro paging_operation(code_model, operation, async_mode, success_status_code=operation.success_status_code) %}
{% import 'keywords.jinja2' as keywords with context %}
{% set next_link_str = "deserialized." + operation.next_link_name + " or None" if operation.next_link_name else "None" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request = operation.request %}
cls = kwargs.pop('cls', None)  # type: ClsType[{{ op_tools.return_type_annotation(operation) }}]
    {{ op_tools.error_map(operation, code_model)|indent }}
{% if request.parameters.grouped %}
    {{ op_tools.grouped_parameters(request)|indent }}
{%- endif -%}
{% if request.parameters.is_flattened %}
    {{ request.parameters.build_flattened_object() }}
{% endif %}
{% if request.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {% for constant_parameter in request.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.constant_declaration }}
    {% endfor %}
{% endif %}

    def prepare_request(next_link=None):
        if not next_link:
            {{ op_tools.get_request(request)|indent(12) }}
        else:
            {{ op_tools.get_request(operation.next_request if operation.next_request else request)|indent(12) }}
            {% if not operation.next_request %}
            # little hacky, but this code will soon be replaced with code that won't need the hack
                {% if request.parameters.path %}
            path_format_arguments = {
                    {% for path_parameter in request.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ request.build_serialize_data_call(path_parameter, "url") }},
                    {% endfor %}
            }
                {% endif %}
            request.url = self._client.format_url(next_link{{", **path_format_arguments" if request.parameters.path}})
            {% endif %}
        return request

    {{ keywords.def }} extract_data(pipeline_response):
        {% set response = operation.responses[0] %}
        deserialized = self._deserialize('{{ response.serialization_type }}', pipeline_response)
        list_of_elem = deserialized.{{ operation.item_name }}
        if cls:
            list_of_elem = cls(list_of_elem)
        {% if async_mode %}
        return {{ next_link_str }}, AsyncList(list_of_elem)
        {% else %}
        return {{ next_link_str }}, iter(list_of_elem)
        {% endif %}

    {{ keywords.def }} get_next(next_link=None):
        request = prepare_request(next_link)

        pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in {{ success_status_code|string() }}:
            {% if operation.default_exception %}
            error = self._deserialize({{ operation.default_exception }}, response)
            {% endif %}
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response{{ ", model=error" if operation.default_exception else "" }}{{ ", error_format=ARMErrorFormat" if code_model.options['azure_arm'] else "" }})

        return pipeline_response
{%- endmacro -%}