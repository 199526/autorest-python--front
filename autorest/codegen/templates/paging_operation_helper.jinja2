{% import 'operation_tools.jinja2' as op_tools with context %}
{% macro paging_operation() %}
{% import 'keywords.jinja2' as keywords with context %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request_builder = operation.request_builder %}
cls = kwargs.pop('cls', None)  {{ operation_serializer.cls_type_annotation(operation) }}
    {{ op_tools.error_map(operation, code_model)|indent }}

    def prepare_request(next_link=None):
        if not next_link:
            {{ op_tools.get_request_builder(code_model, operation, request_builder, async_mode)|indent(12) }}
        else:
            {% set url = keywords.escape_str(operation.next_request_builder.url) if operation.next_request_builder else None %}
            {{ op_tools.get_request_builder(code_model, operation, operation.next_request_builder if operation.next_request_builder else request_builder, async_mode, url=url)|indent(12) }}
            {% if not operation.next_request_builder %}
            # little hacky, but this code will soon be replaced with code that won't need the hack
                {% if operation.parameters.path %}
            {{ op_tools.path_format_arguments(operation.parameters.path)|indent(12) }}
                {% endif %}
            request.method = "GET"
            request.url = self._client.format_url(next_link{{", **path_format_arguments" if operation.parameters.path}})
            {% endif %}
        return request

    {{ keywords.def }} extract_data(pipeline_response):
        {% set response = operation.responses[0] %}
        {% if code_model.no_models %}
            {% set deserialized_str = "_loads(pipeline_response.http_response.text())" %}
            {% set list_of_elem_str = "deserialized.get('" + (operation._item_name if operation._item_name else "value") + "', [])" %}
            {% set next_link_str = "deserialized.get('" + operation._next_link_name + "', None)" if operation._next_link_name else "None" %}
        {% else %}
            {% set deserialized_str = "self._deserialize('" + response.serialization_type + "', pipeline_response)" %}
            {% set list_of_elem_str = "deserialized." + operation.item_name %}
            {% set next_link_str = "deserialized." + operation.next_link_name + " or None" if operation.next_link_name else "None" %}
        {% endif %}
        deserialized = {{ deserialized_str }}
        list_of_elem = {{ list_of_elem_str }}
        if cls:
            list_of_elem = cls(list_of_elem)
        {% if async_mode %}
        return {{ next_link_str }}, AsyncList(list_of_elem)
        {% else %}
        return {{ next_link_str }}, iter(list_of_elem)
        {% endif %}

    {{ keywords.def }} get_next(next_link=None):
        request = prepare_request(next_link)

        pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in {{ success_status_code|string() }}:
            {{ op_tools.handle_error_response(code_model, operation) | indent(12) }}

        return pipeline_response
{%- endmacro -%}