{% import 'operation_tools.jinja2' as op_tools %}

{% macro item_paged_retval(operation, async_mode, initial_response=None) %}
{% import 'keywords.jinja2' as keywords with context %}
{% if not initial_response %}
_initial_request = self._{{ operation.python_name }}_initial(
    {% for parameter in operation.parameters.method %}
    {{ parameter.serialized_name }}={{ parameter.serialized_name }},
    {% endfor %}
)
{% endif %}
{% if operation.next_operation %}
_next_request_callback = functools.partial(
    self._{{ operation.python_name }}_next,
    {% for parameter in operation.next_operation.parameters.method %}
        {% if parameter.serialized_name != "next_link" %}
    {{ parameter.serialized_name }}={{ parameter.serialized_name }},
        {% endif %}
    {% endfor %}
)
{% endif %}

paging_method = kwargs.pop("paging_method", {{ operation.get_default_paging_method() }}({{ "))" if not operation.get_default_paging_method_parameters() }}
{% if operation.get_default_paging_method_parameters() %}
    {% for parameter in operation.get_default_paging_method_parameters() %}
    {{ parameter }},
    {% endfor %}
))
{% endif %}

return {{ operation.get_pager(async_mode) }}(
    paging_method=paging_method,
    deserialize_output=deserialize_output,
    client=self._client,
    continuation_token_location={{ ("'" ~ operation.continuation_token_location ~ "'") if operation.continuation_token_location else "None" }},
    initial_state={{ initial_response if initial_response else "_initial_request" }},
    {% if operation.item_name != 'value' %}
    item_name='{{ operation.item_name }}',
    {% endif %}
    _cls=kwargs.pop("cls", None),
    **kwargs,
){% endmacro %}


{% macro deserialize_output(operation) %}
{% import 'keywords.jinja2' as keywords with context %}
{{ keywords.def }} deserialize_output(pipeline_response):
    {% set response = operation.responses[0] %}
    return self._deserialize('{{ response.serialization_type }}', pipeline_response){%- endmacro -%}