{% import 'keywords.jinja2' as keywords with context %}
{{ code_model.options['license_header'] }}

{{ imports }}

{% if code_model.need_request_converter and not async_mode %}
def _convert_request(request, files=None):
    data = request.content if not files else None
    request = HttpRequest(method=request.method, url=request.url, headers=request.headers, data=data)
    if files:
        request.set_formdata_body(files)
    return request
{% endif %}
{% if code_model.need_format_url and not async_mode %}

def _format_url_section(template, **kwargs):
    components = template.split("/")
    while components:
        try:
            return template.format(**kwargs)
        except KeyError as key:
            formatted_components = template.split("/")
            components = [
                c for c in formatted_components if "{{{}}}".format(key.args[0]) not in c
            ]
            template = "/".join(components)
{% endif %}
{% if code_model.need_mixin_abc %}

class MixinABC(ABC):
    """DO NOT use this class. It is for internal typing use only."""
    _client: "{{ keywords.async_class }}PipelineClient"
    _config: {{ code_model.client.name }}Configuration
    _serialize: "Serializer"
    _deserialize: "Deserializer"
{% endif %}
{% if code_model.need_multiapi_check %}

class validate_version:
    def __init__(self, *, version_method_added = None, args_mapping = None):
        self.version_method_added = version_method_added
        self.args_mapping = args_mapping or {}

    def __call__(self, func):
        version_method_added = self.version_method_added
        args_mapping = self.args_mapping

        def wrapper(self, *args, **kwargs):
            api_version = self._config.api_version
            if version_method_added and api_version < version_method_added:
                raise ValueError(f'"{func.__name__}" is only available for API version {version_method_added} and up.')
            unallowed_parameters = [
                param for param in kwargs.keys()
                if api_version < args_mapping.get(param, api_version)
            ]
            if unallowed_parameters:
                param_to_api_version_error_strings = [
                    "'{}' was added in api version '{}'".format(
                        param,
                        args_mapping[param]
                    )
                    for param in unallowed_parameters
                ]
                raise ValueError(
                    "Passed in parameter(s) '{}' not valid with api version '{}': {}".format(
                        "', '".join(unallowed_parameters),
                        api_version,
                        ", ".join(param_to_api_version_error_strings)
                    )
                )
            return func(self, *args, **kwargs)
        return wrapper
{% endif %}
