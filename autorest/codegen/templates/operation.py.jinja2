{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{# actual template starts here #}
{%- if code_model.options['tracing'] and operation.want_tracing -%}
{{ trace_decorator }}
{% endif %}
{{ operation_serializer.method_signature_and_response_type_annotation(operation) }}
{% if operation.want_description_docstring %}
    {{ op_tools.description(operation, operation_serializer) | indent }}{% endif %}
    cls = kwargs.pop('cls', None)  {{ operation_serializer.cls_type_annotation(operation) }}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    {{ op_tools.error_map(operation, code_model)|indent }}
    {% if not async_mode and operation.parameters.kwargs_to_pop %}

        {% for kwarg in operation.parameters.kwargs_to_pop %}
    {{ kwarg.pop_from_kwarg | indent }}
        {% endfor %}
    {% endif %}

    {{ op_tools.call_request_builder(operation, operation_serializer) | indent }}
    pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    {{ op_tools.handle_response(code_model, operation) | indent }}
{{ operation.python_name }}.metadata = {'url': {{ keywords.escape_str(request_builder.url) }}}  # type: ignore