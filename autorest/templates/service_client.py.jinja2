{%- set config_import = "._configuration_async" if is_async else "._configuration" %}
{%- set def_keyword = "async def" if is_async else "def" %}
{%- set pipeline_client = "AsyncPipelineClient" if is_async else "PipelineClient" %}
{# actual template starts here #}
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from azure.core import {{ pipeline_client }}
from msrest import Serializer, Deserializer

from {{ config_import }} import {{ code_model.client_name }}Configuration
from azure.core.exceptions import map_error
{%- for operation_group_name in operation_group_names %}
{%- set camel_case_op_group_name = to_camel_case(get_client_name(operation_group_name)) %}
{%- if is_async %}
from .operations_async import {{ camel_case_op_group_name }}Operations
from .. import models
{%- else %}
from .operations import {{ camel_case_op_group_name }}Operations
from . import models
{%- endif %}
{%- endfor %}


class {{ code_model.client_name }}(object):
    """{{ code_model.description }}

    {% for operation_group_name in operation_group_names %}
    {%- set python_case_op_group_name = get_client_name(operation_group_name) %}
    {%- set camel_case_op_group_name = to_camel_case(get_client_name(operation_group_name)) %}
    :ivar {{ python_case_op_group_name  }}: {{ camel_case_op_group_name }} operations
    {%- if is_async %}
    :vartype {{ python_case_op_group_name }}: {{ code_model.namespace }}.aio.operations_async.{{ camel_case_op_group_name }}Operations
    {%- else %}
    :vartype {{ python_case_op_group_name }}: {{ code_model.namespace }}.operations.{{ camel_case_op_group_name }}Operations
    {%- endif %}
    {% endfor %}
    {% if not code_model.custom_base_url %}
    :param str base_url: Service URL
    {% endif %}
    """

    def __init__(self{{ '' if code_model.custom_base_url else ', base_url=None' }}, **kwargs):

        {% if code_model.custom_base_url %}
        base_url = '{{ code_model.custom_base_url.template_url }}'
        {% else %}
        if not base_url:
            base_url = '{{ code_model.base_url }}'
        {% endif %}
        self._config = {{ code_model.client_name }}Configuration(**kwargs)
        self._client = {{ pipeline_client }}(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '{{ code_model.api_version }}'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        {% for operation_group_name in operation_group_names %}
        self.{{ get_client_name(operation_group_name) }} = {{ to_camel_case(get_client_name(operation_group_name)) + "Operations" }}(
            self._client, self._config, self._serialize, self._deserialize)
        {% endfor %}
    {%- if is_async %}
    async def __aenter__(self):
        await self._client.__aenter__()
        return self
    async def __aexit__(self, *exc_details):
        await self._client.__aexit__(*exc_details)
    {{ "" }}
    {%- else %}
    def __enter__(self):
        self._client.__enter__()
        return self
    def __exit__(self, *exc_details):
        self._client.__exit__(*exc_details)
    {% endif %}