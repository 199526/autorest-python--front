{% set def_keyword = "async def" if async_mode else "def" %}
{% set await_keyword = "await " if async_mode else "" %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% macro exception_name() %}{{ operation.exceptions[0].schema.name }}Exception{% endmacro %}
{% macro response_headers(response) %}
response_headers = {
    {% for response_header in response.headers %}
    '{{ response_header.name }}': self._deserialize('{{ response_header.schema.get_serialization_type() }}', response.headers.get('{{ response_header.name }}')),
    {% endfor %}
}
{% endmacro %}
{% if code_model.tracing %}
{{ trace_decorator }}
{% endif %}
{{ def_keyword }} {{ operation.python_name }}(self{{ operation.method_signature }}, cls=None, polling=True, **kwargs):
    """{{operation.description.strip() }}.

    {{ "FIXME: add operation.summary\n" }}

{% if operation.deprecated -%}
    .. warning::
       This method is deprecated

{% endif -%}
{% for parameter in operation.method_parameters %}
    {% if parameter.implementation != 'Client' %}
    :param {{ parameter.serialized_name }}: {{ parameter.description }}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.get_python_type(code_model.namespace) }}
    {% endif %}
{% endfor %}
    :param callable cls: A custom type or function that will be passed the direct response
    :param polling: True for ARMPolling, False for no polling, or a
     polling object for personal polling strategy
    :return: FIXME or the result of cls(response)
    :rtype: FIXME
    {% if not operation.exceptions %}
        {% if code_model.options['azure_arm'] %}
    :raises ~azure.mgmt.core.ARMError:
        {% else %}
    :raises ~azure.core.HttpResponseError:
        {% endif %}
    {% else %}
    :raises ~{{ code_model.namespace }}.models.{{ exception_name() }}:
    {% endif %}
    """
    raw_result = self._{{ operation.name }}_initial(
        {% for parameter in operation.parameters %}
            {% if parameter.implementation != 'Client' %}
        {{ parameter.serialized_name }}={{ parameter.serialized_name }},
            {% endif %}
        {% endfor %}
        **kwargs
    )

    def get_long_running_output(response):
        {% if operation.lro_response_type %}
        deserialized = self._deserialize('{{ operation.lro_response_type }}', response)

        return deserialized
        {% else %}
        if cls:
            {% if operation.has_response_body or operation.any_response_has_headers %}
                {% set response = operation.responses[0] %}
            {{ response_headers(response) }}
            {% else %}
            response_headers = {}
            {% endif %}
            return cls(response, None, response_headers)
        {% endif %}
    lro_delay = kwargs.get(
        'polling_interval',
        self._config.polling_interval
    )
    if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
    elif polling is False: polling_method = NoPolling()
    else: polling_method = polling
    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
{{ operation.python_name }}.metadata = {'url': '{{ operation.url }}'}
