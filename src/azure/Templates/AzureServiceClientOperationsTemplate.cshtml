@using AutoRest.Python.vanilla.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Extensions.Azure
@using AutoRest.Python
@using AutoRest.Python.Azure.Model
@using AutoRest.Python.azure.Templates
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<CodeModelPya>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
@if (Model.HasAnyDeprecated)
{
@:import warnings
}
from msrest.pipeline import ClientRawResponse
@if(Model.HasAnyAzureErrors)
{
@:from azure.core import AzureError
}
@if (Model.HasAnyLongRunOperation)
{
@:from msrest.polling import LROPoller, NoPolling
@:from msrestazure.polling.arm_polling import ARMPolling
}
@if (Model.HasAnyModel)
{
@:from .. import models
}
import uuid
@EmptyLine
@EmptyLine
class @(Model.Name)OperationsMixin(object):
    def _map_error(self, status_code, response, **config):
        error_map = config.get("error_map")
        if error_map is None:
            return None
        error = error_map.get(status_code)
        if error is None:
            return
        error_type = error[0]
        msg = error[1]
        error_instance = error_type(message=msg, response=response)
        raise error_instance
        
@foreach (var method in Model.MethodTemplateModels.Where(each => each.MethodGroup.IsCodeModelMethodGroup))
{
@EmptyLine
@(Include(new AzureMethodTemplate() {AsyncMode = false, Python3Mode = false}, (MethodPya)method))
}
