trigger:
  branches:
    include:
      - autorestv3

pr:
  branches:
    include:
      - autorestv3

resources:
  repositories:
    - repository: azure-sdk-tools
      type: git
      name: Azure/azure-sdk-tools
      ref: refs/heads/main

variables:
  NodeVersion: "14.x"
  PythonVersion: "3.7"
  TestFolder: "$(Build.SourcesDirectory)/test/"
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/coverage/"

parameters:
  - TestProxy@Azure/azure-sdk-tools: true
  - name: VerificationPackages
    type: object
    default:
    - name: azure-messaging-webpubsubservice
      service: webpubsub
    - name: azure-storage-blob
      service: storage
    - name: azure-storage-queue
      service: storage
    - name: azure-storage-file-datalake
      service: storage
    - name: azure-storage-file-share
      service: storage
    - name: azure-ai-language-questionanswering
      service: cognitivelanguage

jobs:
  - job: "AutoRest_Python_CI"
    displayName: "Run AutoRest CI Checks"

    strategy:
      matrix:
        Linux_Python37:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.7"
        Linux_Python310:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.10"

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: $(OSVmImage)

    steps:
      - checkout: self
      - checkout: azure-sdk-build-tools
      - task: NodeTool@0
        displayName: "Install Node.js $(NodeVersion)"
        inputs:
          versionSpec: "$(NodeVersion)"

      - task: UsePythonVersion@0
        displayName: "Use Python 3.7"
        inputs:
          versionSpec: 3.7

      - script: |
          cd $(Build.SourcesDirectory)
          pip install -r dev_requirements.txt
          npm install -g autorest
          npm install
        displayName: 'Prepare Environment for Generation'

      - ${{ if eq(ne(variables['Build.Reason'], 'PullRequest'), 'True') }}:
        - script: |
            git clone https://github.com/Azure/azure-sdk-for-python.git --depth=1 --branch main $(Build.SourcesDirectory)/regenerated/
          displayName: 'Clone python repo'

        - script: |
            pip install tox-monorepo
          displayName: 'Prepare environment'
          workingDirectory: '$(Build.SourcesDirectory)/regenerated/'

        - ${{ each package in parameters.VerificationPackages }}:
          - script: |
              autorest ./swagger/README.md --use=$(Build.SourcesDirectory) --modelerfour.seal-single-value-enum-by-default
            displayName: 'Regenerate target package ${{ package.name }}'
            workingDirectory: '$(Build.SourcesDirectory)/regenerated/sdk/${{ package.service }}/${{ package.name }}'

          - script: |
              tox -e whl -c ../../../eng/tox/tox.ini
            displayName: 'Run tests for ${{ package.name }}'
            workingDirectory: '$(Build.SourcesDirectory)/regenerated/sdk/${{ package.service }}/${{ package.name }}'
