trigger:
  branches:
    include:
      - autorestv3

pr:
  branches:
    include:
      - autorestv3

resources:
  repositories:
    - repository: azure-sdk-tools
      type: github
      endpoint: Azure
      name: Azure/azure-sdk-tools

variables:
  NodeVersion: "14.x"
  PythonVersion: "3.7"
  TestFolder: "$(Build.SourcesDirectory)/autorest.python/test/"
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/autorest.python/coverage/"
  PROXY_URL: "http://localhost:5000"
  PROXY_MANUAL_START: "true"
  AZURE_TEST_RUN_LIVE: "false"

parameters:
  - name: VerificationPackages
    type: object
    default:
    - name: azure-storage-blob
      service: storage
    - name: azure-storage-queue
      service: storage
    - name: azure-storage-file-datalake
      service: storage
    - name: azure-storage-file-share
      service: storage
    - name: azure-ai-language-questionanswering
      service: cognitivelanguage

jobs:
  - job: "AutoRest_Python_CI"
    displayName: "Run AutoRest CI Checks"

    strategy:
      matrix:
        Linux_Python37:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.7"
        Linux_Python310:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.10"

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: $(OSVmImage)

    steps:
      - checkout: self
      - checkout: azure-sdk-tools
      - template: eng/common/testproxy/test-proxy-tool.yml@azure-sdk-tools
        parameters:
          TestProxy: true
          templateRoot: azure-sdk-tools
      - task: NodeTool@0
        displayName: "Install Node.js $(NodeVersion)"
        inputs:
          versionSpec: "$(NodeVersion)"

      - task: UsePythonVersion@0
        displayName: "Use Python 3.7"
        inputs:
          versionSpec: 3.7
      - script: |
          pip install -r dev_requirements.txt
          npm install -g autorest
          npm install
        displayName: "Prepare Environment for Generation"
        workingDirectory: $(Build.SourcesDirectory)/autorest.python

      - ${{ if eq(ne(variables['Build.Reason'], 'PullRequest'), 'True') }}:
          - script: |
              git clone https://github.com/Azure/azure-sdk-for-python.git --depth=1 --branch main $(Build.SourcesDirectory)/regenerated/
              ls $(Build.SourcesDirectory)/regenerated/
            displayName: "Clone python repo"

          - script: |
              pip install tox-monorepo
            displayName: "Prepare environment"
            workingDirectory: "$(Build.SourcesDirectory)/regenerated/"

          - ${{ each package in parameters.VerificationPackages }}:
              - script: |
                  cd $(Build.SourcesDirectory)/regenerated/sdk/${{ package.service }}/${{ package.name }}
                  ls
                  echo -----------------------------------
                  ls tests/recordings/
                displayName: "Run tests for ${{ package.name }}"
